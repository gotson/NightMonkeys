plugins {
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id 'me.champeau.mrjar' version '0.1' apply(false)
    id 'org.jreleaser' version '1.0.0'
    id 'com.github.ben-manes.versions' version '0.42.0'
}

nexusPublishing {
    repositories {
        sonatype()
    }
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def unstableKeyword = ['ALPHA', 'RC'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    def isStable = stableKeyword || version ==~ regex
    return unstableKeyword || !isStable
}

allprojects {
    group = 'com.github.gotson.nightmonkeys'
    repositories {
        mavenCentral()
    }

    apply plugin: 'com.github.ben-manes.versions'
    tasks.named("dependencyUpdates").configure {
        rejectVersionIf {
            isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
        }
        gradleReleaseChannel = 'current'
        checkConstraints = true
    }
}

subprojects {
    apply from: "${rootDir}/gradle/publish.gradle"
    if (it.name != 'imageio-common') {
        apply from: "${rootDir}/gradle/mrjar.gradle"
        apply from: "${rootDir}/gradle/dependencies.gradle"
    }
}

jreleaser {
    release {
        github {
            discussionCategoryName = 'Announcements'

            changelog {
                formatted = 'ALWAYS'
                preset = 'conventional-commits'
                links = true
                format = '- {{commitShortHash}} {{commitTitle}}'
                contributors {
                    enabled = false
                }
                hide {
                    uncategorized = true
                }
                excludeLabels = ['chore']
                category {
                    title = 'üèé Perf'
                    key = 'perf'
                    labels = ['perf']
                    order = 25
                }
            }
        }
    }
}

wrapper {
    gradleVersion = '7.4.2'
    distributionType = Wrapper.DistributionType.ALL
}