plugins {
    id 'base'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
    id 'me.champeau.mrjar' version '0.1.1' apply(false)
    id 'org.jreleaser' version '1.5.1'
    id 'com.github.ben-manes.versions' version '0.46.0'
}

nexusPublishing {
    repositories {
        sonatype()
    }
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def unstableKeyword = ['ALPHA', 'RC'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    def isStable = stableKeyword || version ==~ regex
    return unstableKeyword || !isStable
}

allprojects {
    group = 'com.github.gotson.nightmonkeys'
    repositories {
        mavenCentral()
    }

    apply plugin: 'com.github.ben-manes.versions'
    tasks.named("dependencyUpdates").configure {
        rejectVersionIf {
            isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
        }
        gradleReleaseChannel = 'current'
        checkConstraints = true
    }
}

subprojects {
    apply from: "${rootDir}/gradle/publish.gradle"
    if (it.name != 'imageio-common') {
        apply from: "${rootDir}/gradle/mrjar.gradle"
        apply from: "${rootDir}/gradle/dependencies.gradle"
    }
}

jreleaser {
    project {
        description = 'NightMonkeys :: ImageIO'
        copyright = 'Gauthier Roebroeck'
    }
    release {
        github {
            discussionCategoryName = 'Announcements'

            changelog {
                formatted = 'ALWAYS'
                preset = 'conventional-commits'
                skipMergeCommits = true
                links = true
                format = '- {{#commitIsConventional}}{{#conventionalCommitIsBreakingChange}}üö® {{/conventionalCommitIsBreakingChange}}{{#conventionalCommitScope}}**{{conventionalCommitScope}}**: {{/conventionalCommitScope}}{{conventionalCommitDescription}}{{#conventionalCommitBreakingChangeContent}}: *{{conventionalCommitBreakingChangeContent}}*{{/conventionalCommitBreakingChangeContent}} ({{commitShortHash}}){{/commitIsConventional}}{{^commitIsConventional}}{{commitTitle}} ({{commitShortHash}}){{/commitIsConventional}}{{#commitHasIssues}}, closes{{#commitIssues}} {{issue}}{{/commitIssues}}{{/commitHasIssues}}'
                contributors {
                    enabled = false
                }
                hide {
                    uncategorized = true
                    contributors = ['[bot]', 'github-actions', 'GitHub']
                }
                excludeLabels = ['chore']
                category {
                    title = 'üèé Perf'
                    key = 'perf'
                    labels = ['perf']
                    order = 25
                }
                labeler {
                    label = 'perf'
                    title = 'regex:^(?:perf(?:\\(.*\\))?!?):\\s.*'
                    order = 120
                }
            }

            issues {
                enabled = true
                comment = 'üéâ This issue has been resolved in `{{tagName}}` ([Release Notes]({{releaseNotesUrl}}))'
                applyMilestone = 'ALWAYS'
                label {
                    name = 'released'
                    description = 'Issue has been released'
                    color = '#ededed'
                }
            }
        }
    }
}

wrapper {
    gradleVersion = '7.6'
    distributionType = Wrapper.DistributionType.ALL
}