// Generated by jextract

package com.github.gotson.nightmonkeys.jxl.lib.panama;

import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.NativeSymbol;
import jdk.incubator.foreign.ResourceScope;

public interface jpegxl_alloc_func {

    jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress opaque, long size);

    static NativeSymbol allocate(jpegxl_alloc_func fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(jpegxl_alloc_func.class, fi, constants$0.jpegxl_alloc_func$FUNC,
            "(Ljdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/Addressable;", scope);
    }

    static jpegxl_alloc_func ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("jpegxl_alloc_func::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
        return (jdk.incubator.foreign.MemoryAddress opaque, long size) -> {
            try {
                return (jdk.incubator.foreign.Addressable) (jdk.incubator.foreign.MemoryAddress) constants$0.jpegxl_alloc_func$MH.invokeExact(symbol,
                    (jdk.incubator.foreign.Addressable) opaque, size);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


