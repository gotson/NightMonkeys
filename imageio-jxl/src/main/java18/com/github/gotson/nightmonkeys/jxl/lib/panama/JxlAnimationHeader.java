// Generated by jextract

package com.github.gotson.nightmonkeys.jxl.lib.panama;

import jdk.incubator.foreign.GroupLayout;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.MemoryLayout;
import jdk.incubator.foreign.MemorySegment;
import jdk.incubator.foreign.ResourceScope;
import jdk.incubator.foreign.SegmentAllocator;

import java.lang.invoke.VarHandle;

/**
 * The codestream animation header, optionally present in the beginning of
 * the codestream, and if it is it applies to all animation frames, unlike
 * JxlFrameHeader which applies to an individual frame.
 */
public class JxlAnimationHeader {

    static final GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("tps_numerator"),
        Constants$root.C_INT$LAYOUT.withName("tps_denominator"),
        Constants$root.C_INT$LAYOUT.withName("num_loops"),
        Constants$root.C_INT$LAYOUT.withName("have_timecodes")
    );

    public static MemoryLayout $LAYOUT() {
        return JxlAnimationHeader.$struct$LAYOUT;
    }

    static final VarHandle tps_numerator$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tps_numerator"));

    public static VarHandle tps_numerator$VH() {
        return JxlAnimationHeader.tps_numerator$VH;
    }

    /**
     * Numerator of ticks per second of a single animation frame time unit
     */
    public static int tps_numerator$get(MemorySegment seg) {
        return (int) JxlAnimationHeader.tps_numerator$VH.get(seg);
    }

    /**
     * Numerator of ticks per second of a single animation frame time unit
     */
    public static void tps_numerator$set(MemorySegment seg, int x) {
        JxlAnimationHeader.tps_numerator$VH.set(seg, x);
    }

    /**
     * Numerator of ticks per second of a single animation frame time unit
     */
    public static int tps_numerator$get(MemorySegment seg, long index) {
        return (int) JxlAnimationHeader.tps_numerator$VH.get(seg.asSlice(index * sizeof()));
    }

    /**
     * Numerator of ticks per second of a single animation frame time unit
     */
    public static void tps_numerator$set(MemorySegment seg, long index, int x) {
        JxlAnimationHeader.tps_numerator$VH.set(seg.asSlice(index * sizeof()), x);
    }

    static final VarHandle tps_denominator$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tps_denominator"));

    public static VarHandle tps_denominator$VH() {
        return JxlAnimationHeader.tps_denominator$VH;
    }

    /**
     * Denominator of ticks per second of a single animation frame time unit
     */
    public static int tps_denominator$get(MemorySegment seg) {
        return (int) JxlAnimationHeader.tps_denominator$VH.get(seg);
    }

    /**
     * Denominator of ticks per second of a single animation frame time unit
     */
    public static void tps_denominator$set(MemorySegment seg, int x) {
        JxlAnimationHeader.tps_denominator$VH.set(seg, x);
    }

    /**
     * Denominator of ticks per second of a single animation frame time unit
     */
    public static int tps_denominator$get(MemorySegment seg, long index) {
        return (int) JxlAnimationHeader.tps_denominator$VH.get(seg.asSlice(index * sizeof()));
    }

    /**
     * Denominator of ticks per second of a single animation frame time unit
     */
    public static void tps_denominator$set(MemorySegment seg, long index, int x) {
        JxlAnimationHeader.tps_denominator$VH.set(seg.asSlice(index * sizeof()), x);
    }

    static final VarHandle num_loops$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("num_loops"));

    public static VarHandle num_loops$VH() {
        return JxlAnimationHeader.num_loops$VH;
    }

    /**
     * Amount of animation loops, or 0 to repeat infinitely
     */
    public static int num_loops$get(MemorySegment seg) {
        return (int) JxlAnimationHeader.num_loops$VH.get(seg);
    }

    /**
     * Amount of animation loops, or 0 to repeat infinitely
     */
    public static void num_loops$set(MemorySegment seg, int x) {
        JxlAnimationHeader.num_loops$VH.set(seg, x);
    }

    /**
     * Amount of animation loops, or 0 to repeat infinitely
     */
    public static int num_loops$get(MemorySegment seg, long index) {
        return (int) JxlAnimationHeader.num_loops$VH.get(seg.asSlice(index * sizeof()));
    }

    /**
     * Amount of animation loops, or 0 to repeat infinitely
     */
    public static void num_loops$set(MemorySegment seg, long index, int x) {
        JxlAnimationHeader.num_loops$VH.set(seg.asSlice(index * sizeof()), x);
    }

    static final VarHandle have_timecodes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("have_timecodes"));

    public static VarHandle have_timecodes$VH() {
        return JxlAnimationHeader.have_timecodes$VH;
    }

    /**
     * Whether animation time codes are present at animation frames in the
     * codestream
     */
    public static int have_timecodes$get(MemorySegment seg) {
        return (int) JxlAnimationHeader.have_timecodes$VH.get(seg);
    }

    /**
     * Whether animation time codes are present at animation frames in the
     * codestream
     */
    public static void have_timecodes$set(MemorySegment seg, int x) {
        JxlAnimationHeader.have_timecodes$VH.set(seg, x);
    }

    /**
     * Whether animation time codes are present at animation frames in the
     * codestream
     */
    public static int have_timecodes$get(MemorySegment seg, long index) {
        return (int) JxlAnimationHeader.have_timecodes$VH.get(seg.asSlice(index * sizeof()));
    }

    /**
     * Whether animation time codes are present at animation frames in the
     * codestream
     */
    public static void have_timecodes$set(MemorySegment seg, long index, int x) {
        JxlAnimationHeader.have_timecodes$VH.set(seg.asSlice(index * sizeof()), x);
    }

    public static long sizeof() {
        return $LAYOUT().byteSize();
    }

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate($LAYOUT());
    }

    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }

    public static MemorySegment allocate(ResourceScope scope) {
        return allocate(SegmentAllocator.nativeAllocator(scope));
    }

    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }

    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) {
        return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope);
    }
}


