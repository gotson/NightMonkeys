// Generated by jextract

package com.github.gotson.nightmonkeys.jxl.lib.panama;

import jdk.incubator.foreign.GroupLayout;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.MemoryLayout;
import jdk.incubator.foreign.MemorySegment;
import jdk.incubator.foreign.ResourceScope;
import jdk.incubator.foreign.SegmentAllocator;

import java.lang.invoke.VarHandle;

public class JxlFrameHeader {

    static final GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("duration"),
        Constants$root.C_INT$LAYOUT.withName("timecode"),
        Constants$root.C_INT$LAYOUT.withName("name_length"),
        Constants$root.C_INT$LAYOUT.withName("is_last")
    );

    public static MemoryLayout $LAYOUT() {
        return JxlFrameHeader.$struct$LAYOUT;
    }

    static final VarHandle duration$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("duration"));

    public static VarHandle duration$VH() {
        return JxlFrameHeader.duration$VH;
    }

    public static int duration$get(MemorySegment seg) {
        return (int) JxlFrameHeader.duration$VH.get(seg);
    }

    public static void duration$set(MemorySegment seg, int x) {
        JxlFrameHeader.duration$VH.set(seg, x);
    }

    public static int duration$get(MemorySegment seg, long index) {
        return (int) JxlFrameHeader.duration$VH.get(seg.asSlice(index * sizeof()));
    }

    public static void duration$set(MemorySegment seg, long index, int x) {
        JxlFrameHeader.duration$VH.set(seg.asSlice(index * sizeof()), x);
    }

    static final VarHandle timecode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("timecode"));

    public static VarHandle timecode$VH() {
        return JxlFrameHeader.timecode$VH;
    }

    public static int timecode$get(MemorySegment seg) {
        return (int) JxlFrameHeader.timecode$VH.get(seg);
    }

    public static void timecode$set(MemorySegment seg, int x) {
        JxlFrameHeader.timecode$VH.set(seg, x);
    }

    public static int timecode$get(MemorySegment seg, long index) {
        return (int) JxlFrameHeader.timecode$VH.get(seg.asSlice(index * sizeof()));
    }

    public static void timecode$set(MemorySegment seg, long index, int x) {
        JxlFrameHeader.timecode$VH.set(seg.asSlice(index * sizeof()), x);
    }

    static final VarHandle name_length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("name_length"));

    public static VarHandle name_length$VH() {
        return JxlFrameHeader.name_length$VH;
    }

    public static int name_length$get(MemorySegment seg) {
        return (int) JxlFrameHeader.name_length$VH.get(seg);
    }

    public static void name_length$set(MemorySegment seg, int x) {
        JxlFrameHeader.name_length$VH.set(seg, x);
    }

    public static int name_length$get(MemorySegment seg, long index) {
        return (int) JxlFrameHeader.name_length$VH.get(seg.asSlice(index * sizeof()));
    }

    public static void name_length$set(MemorySegment seg, long index, int x) {
        JxlFrameHeader.name_length$VH.set(seg.asSlice(index * sizeof()), x);
    }

    static final VarHandle is_last$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("is_last"));

    public static VarHandle is_last$VH() {
        return JxlFrameHeader.is_last$VH;
    }

    public static int is_last$get(MemorySegment seg) {
        return (int) JxlFrameHeader.is_last$VH.get(seg);
    }

    public static void is_last$set(MemorySegment seg, int x) {
        JxlFrameHeader.is_last$VH.set(seg, x);
    }

    public static int is_last$get(MemorySegment seg, long index) {
        return (int) JxlFrameHeader.is_last$VH.get(seg.asSlice(index * sizeof()));
    }

    public static void is_last$set(MemorySegment seg, long index, int x) {
        JxlFrameHeader.is_last$VH.set(seg.asSlice(index * sizeof()), x);
    }

    public static long sizeof() {
        return $LAYOUT().byteSize();
    }

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate($LAYOUT());
    }

    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }

    public static MemorySegment allocate(ResourceScope scope) {
        return allocate(SegmentAllocator.nativeAllocator(scope));
    }

    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }

    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) {
        return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope);
    }
}


