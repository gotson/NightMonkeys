// Generated by jextract

package com.github.gotson.nightmonkeys.jxl.lib.panama;

import jdk.incubator.foreign.GroupLayout;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.MemoryLayout;
import jdk.incubator.foreign.MemorySegment;
import jdk.incubator.foreign.ResourceScope;
import jdk.incubator.foreign.SegmentAllocator;

import java.lang.invoke.VarHandle;

/**
 * Data type for the sample values per channel per pixel for the output buffer
 * for pixels. This is not necessarily the same as the data type encoded in the
 * codestream. The channels are interleaved per pixel. The pixels are
 * organized row by row, left to right, top to bottom.
 */
public class JxlPixelFormat {

    static final GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("num_channels"),
        Constants$root.C_INT$LAYOUT.withName("data_type"),
        Constants$root.C_INT$LAYOUT.withName("endianness"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("align")
    );

    public static MemoryLayout $LAYOUT() {
        return JxlPixelFormat.$struct$LAYOUT;
    }

    static final VarHandle num_channels$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("num_channels"));

    public static VarHandle num_channels$VH() {
        return JxlPixelFormat.num_channels$VH;
    }

    /**
     * Amount of channels available in a pixel buffer.
     * 1: single-channel data, e.g. grayscale or a single extra channel
     * 2: single-channel + alpha
     * 3: trichromatic, e.g. RGB
     * 4: trichromatic + alpha
     */
    public static int num_channels$get(MemorySegment seg) {
        return (int) JxlPixelFormat.num_channels$VH.get(seg);
    }

    /**
     * Amount of channels available in a pixel buffer.
     * 1: single-channel data, e.g. grayscale or a single extra channel
     * 2: single-channel + alpha
     * 3: trichromatic, e.g. RGB
     * 4: trichromatic + alpha
     */
    public static void num_channels$set(MemorySegment seg, int x) {
        JxlPixelFormat.num_channels$VH.set(seg, x);
    }

    /**
     * Amount of channels available in a pixel buffer.
     * 1: single-channel data, e.g. grayscale or a single extra channel
     * 2: single-channel + alpha
     * 3: trichromatic, e.g. RGB
     * 4: trichromatic + alpha
     */
    public static int num_channels$get(MemorySegment seg, long index) {
        return (int) JxlPixelFormat.num_channels$VH.get(seg.asSlice(index * sizeof()));
    }

    /**
     * Amount of channels available in a pixel buffer.
     * 1: single-channel data, e.g. grayscale or a single extra channel
     * 2: single-channel + alpha
     * 3: trichromatic, e.g. RGB
     * 4: trichromatic + alpha
     */
    public static void num_channels$set(MemorySegment seg, long index, int x) {
        JxlPixelFormat.num_channels$VH.set(seg.asSlice(index * sizeof()), x);
    }

    static final VarHandle data_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("data_type"));

    public static VarHandle data_type$VH() {
        return JxlPixelFormat.data_type$VH;
    }

    /**
     * Data type of each channel.
     */
    public static int data_type$get(MemorySegment seg) {
        return (int) JxlPixelFormat.data_type$VH.get(seg);
    }

    /**
     * Data type of each channel.
     */
    public static void data_type$set(MemorySegment seg, int x) {
        JxlPixelFormat.data_type$VH.set(seg, x);
    }

    /**
     * Data type of each channel.
     */
    public static int data_type$get(MemorySegment seg, long index) {
        return (int) JxlPixelFormat.data_type$VH.get(seg.asSlice(index * sizeof()));
    }

    /**
     * Data type of each channel.
     */
    public static void data_type$set(MemorySegment seg, long index, int x) {
        JxlPixelFormat.data_type$VH.set(seg.asSlice(index * sizeof()), x);
    }

    static final VarHandle endianness$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("endianness"));

    public static VarHandle endianness$VH() {
        return JxlPixelFormat.endianness$VH;
    }

    /**
     * Whether multi-byte data types are represented in big endian or little
     * endian format. This applies to JXL_TYPE_UINT16, JXL_TYPE_UINT32
     * and JXL_TYPE_FLOAT.
     */
    public static int endianness$get(MemorySegment seg) {
        return (int) JxlPixelFormat.endianness$VH.get(seg);
    }

    /**
     * Whether multi-byte data types are represented in big endian or little
     * endian format. This applies to JXL_TYPE_UINT16, JXL_TYPE_UINT32
     * and JXL_TYPE_FLOAT.
     */
    public static void endianness$set(MemorySegment seg, int x) {
        JxlPixelFormat.endianness$VH.set(seg, x);
    }

    /**
     * Whether multi-byte data types are represented in big endian or little
     * endian format. This applies to JXL_TYPE_UINT16, JXL_TYPE_UINT32
     * and JXL_TYPE_FLOAT.
     */
    public static int endianness$get(MemorySegment seg, long index) {
        return (int) JxlPixelFormat.endianness$VH.get(seg.asSlice(index * sizeof()));
    }

    /**
     * Whether multi-byte data types are represented in big endian or little
     * endian format. This applies to JXL_TYPE_UINT16, JXL_TYPE_UINT32
     * and JXL_TYPE_FLOAT.
     */
    public static void endianness$set(MemorySegment seg, long index, int x) {
        JxlPixelFormat.endianness$VH.set(seg.asSlice(index * sizeof()), x);
    }

    static final VarHandle align$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("align"));

    public static VarHandle align$VH() {
        return JxlPixelFormat.align$VH;
    }

    /**
     * Align scanlines to a multiple of align bytes, or 0 to require no
     * alignment at all (which has the same effect as value 1)
     */
    public static long align$get(MemorySegment seg) {
        return (long) JxlPixelFormat.align$VH.get(seg);
    }

    /**
     * Align scanlines to a multiple of align bytes, or 0 to require no
     * alignment at all (which has the same effect as value 1)
     */
    public static void align$set(MemorySegment seg, long x) {
        JxlPixelFormat.align$VH.set(seg, x);
    }

    /**
     * Align scanlines to a multiple of align bytes, or 0 to require no
     * alignment at all (which has the same effect as value 1)
     */
    public static long align$get(MemorySegment seg, long index) {
        return (long) JxlPixelFormat.align$VH.get(seg.asSlice(index * sizeof()));
    }

    /**
     * Align scanlines to a multiple of align bytes, or 0 to require no
     * alignment at all (which has the same effect as value 1)
     */
    public static void align$set(MemorySegment seg, long index, long x) {
        JxlPixelFormat.align$VH.set(seg.asSlice(index * sizeof()), x);
    }

    public static long sizeof() {
        return $LAYOUT().byteSize();
    }

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate($LAYOUT());
    }

    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }

    public static MemorySegment allocate(ResourceScope scope) {
        return allocate(SegmentAllocator.nativeAllocator(scope));
    }

    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }

    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) {
        return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope);
    }
}


