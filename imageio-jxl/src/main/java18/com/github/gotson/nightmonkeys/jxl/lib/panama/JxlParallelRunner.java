// Generated by jextract

package com.github.gotson.nightmonkeys.jxl.lib.panama;

import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.NativeSymbol;
import jdk.incubator.foreign.ResourceScope;

public interface JxlParallelRunner {

    int apply(jdk.incubator.foreign.MemoryAddress runner_opaque, jdk.incubator.foreign.MemoryAddress jpegxl_opaque, jdk.incubator.foreign.MemoryAddress init,
              jdk.incubator.foreign.MemoryAddress func, int start_range, int end_range);

    static NativeSymbol allocate(JxlParallelRunner fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(JxlParallelRunner.class, fi, constants$1.JxlParallelRunner$FUNC,
            "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)I",
            scope);
    }

    static JxlParallelRunner ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("JxlParallelRunner::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
        return (jdk.incubator.foreign.MemoryAddress runner_opaque, jdk.incubator.foreign.MemoryAddress jpegxl_opaque, jdk.incubator.foreign.MemoryAddress init, jdk.incubator.foreign.MemoryAddress func, int start_range, int end_range) -> {
            try {
                return (int) constants$1.JxlParallelRunner$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable) runner_opaque,
                    (jdk.incubator.foreign.Addressable) jpegxl_opaque, (jdk.incubator.foreign.Addressable) init, (jdk.incubator.foreign.Addressable) func, start_range,
                    end_range);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


