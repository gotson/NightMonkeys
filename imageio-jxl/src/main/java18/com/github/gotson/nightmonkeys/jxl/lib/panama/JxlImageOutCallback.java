// Generated by jextract

package com.github.gotson.nightmonkeys.jxl.lib.panama;

import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.NativeSymbol;
import jdk.incubator.foreign.ResourceScope;

public interface JxlImageOutCallback {

    void apply(jdk.incubator.foreign.MemoryAddress opaque, long x, long y, long num_pixels, jdk.incubator.foreign.MemoryAddress pixels);

    static NativeSymbol allocate(JxlImageOutCallback fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(JxlImageOutCallback.class, fi, constants$6.JxlImageOutCallback$FUNC,
            "(Ljdk/incubator/foreign/MemoryAddress;JJJLjdk/incubator/foreign/MemoryAddress;)V", scope);
    }

    static JxlImageOutCallback ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("JxlImageOutCallback::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
        return (jdk.incubator.foreign.MemoryAddress opaque, long x, long y, long num_pixels, jdk.incubator.foreign.MemoryAddress pixels) -> {
            try {
                constants$6.JxlImageOutCallback$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable) opaque, x, y, num_pixels,
                    (jdk.incubator.foreign.Addressable) pixels);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


