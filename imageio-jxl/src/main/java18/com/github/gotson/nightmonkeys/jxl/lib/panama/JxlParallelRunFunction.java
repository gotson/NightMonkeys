// Generated by jextract

package com.github.gotson.nightmonkeys.jxl.lib.panama;

import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.NativeSymbol;
import jdk.incubator.foreign.ResourceScope;

public interface JxlParallelRunFunction {

    void apply(jdk.incubator.foreign.MemoryAddress jpegxl_opaque, int value, long thread_id);

    static NativeSymbol allocate(JxlParallelRunFunction fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(JxlParallelRunFunction.class, fi, constants$1.JxlParallelRunFunction$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;IJ)V", scope);
    }

    static JxlParallelRunFunction ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("JxlParallelRunFunction::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
        return (jdk.incubator.foreign.MemoryAddress jpegxl_opaque, int value, long thread_id) -> {
            try {
                constants$1.JxlParallelRunFunction$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable) jpegxl_opaque, value, thread_id);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


