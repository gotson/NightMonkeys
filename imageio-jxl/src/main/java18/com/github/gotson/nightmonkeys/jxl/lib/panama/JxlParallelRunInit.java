// Generated by jextract

package com.github.gotson.nightmonkeys.jxl.lib.panama;

import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.NativeSymbol;
import jdk.incubator.foreign.ResourceScope;

public interface JxlParallelRunInit {

    int apply(jdk.incubator.foreign.MemoryAddress jpegxl_opaque, long num_threads);

    static NativeSymbol allocate(JxlParallelRunInit fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(JxlParallelRunInit.class, fi, constants$0.JxlParallelRunInit$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;J)I", scope);
    }

    static JxlParallelRunInit ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("JxlParallelRunInit::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
        return (jdk.incubator.foreign.MemoryAddress jpegxl_opaque, long num_threads) -> {
            try {
                return (int) constants$0.JxlParallelRunInit$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable) jpegxl_opaque, num_threads);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


