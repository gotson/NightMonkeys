// Generated by jextract

package com.github.gotson.nightmonkeys.jxl.lib.panama;

import jdk.incubator.foreign.GroupLayout;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.MemoryLayout;
import jdk.incubator.foreign.MemorySegment;
import jdk.incubator.foreign.ResourceScope;
import jdk.incubator.foreign.SegmentAllocator;

import java.lang.invoke.VarHandle;

public class JxlMemoryManagerStruct {

    static final GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("opaque"),
        Constants$root.C_POINTER$LAYOUT.withName("alloc"),
        Constants$root.C_POINTER$LAYOUT.withName("free")
    ).withName("JxlMemoryManagerStruct");

    public static MemoryLayout $LAYOUT() {
        return JxlMemoryManagerStruct.$struct$LAYOUT;
    }

    static final VarHandle opaque$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("opaque"));

    public static VarHandle opaque$VH() {
        return JxlMemoryManagerStruct.opaque$VH;
    }

    public static MemoryAddress opaque$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress) JxlMemoryManagerStruct.opaque$VH.get(seg);
    }

    public static void opaque$set(MemorySegment seg, MemoryAddress x) {
        JxlMemoryManagerStruct.opaque$VH.set(seg, x);
    }

    public static MemoryAddress opaque$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress) JxlMemoryManagerStruct.opaque$VH.get(seg.asSlice(index * sizeof()));
    }

    public static void opaque$set(MemorySegment seg, long index, MemoryAddress x) {
        JxlMemoryManagerStruct.opaque$VH.set(seg.asSlice(index * sizeof()), x);
    }

    static final VarHandle alloc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("alloc"));

    public static VarHandle alloc$VH() {
        return JxlMemoryManagerStruct.alloc$VH;
    }

    public static MemoryAddress alloc$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress) JxlMemoryManagerStruct.alloc$VH.get(seg);
    }

    public static void alloc$set(MemorySegment seg, MemoryAddress x) {
        JxlMemoryManagerStruct.alloc$VH.set(seg, x);
    }

    public static MemoryAddress alloc$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress) JxlMemoryManagerStruct.alloc$VH.get(seg.asSlice(index * sizeof()));
    }

    public static void alloc$set(MemorySegment seg, long index, MemoryAddress x) {
        JxlMemoryManagerStruct.alloc$VH.set(seg.asSlice(index * sizeof()), x);
    }

    public static jpegxl_alloc_func alloc(MemorySegment segment, ResourceScope scope) {
        return jpegxl_alloc_func.ofAddress(alloc$get(segment), scope);
    }

    static final VarHandle free$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("free"));

    public static VarHandle free$VH() {
        return JxlMemoryManagerStruct.free$VH;
    }

    public static MemoryAddress free$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress) JxlMemoryManagerStruct.free$VH.get(seg);
    }

    public static void free$set(MemorySegment seg, MemoryAddress x) {
        JxlMemoryManagerStruct.free$VH.set(seg, x);
    }

    public static MemoryAddress free$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress) JxlMemoryManagerStruct.free$VH.get(seg.asSlice(index * sizeof()));
    }

    public static void free$set(MemorySegment seg, long index, MemoryAddress x) {
        JxlMemoryManagerStruct.free$VH.set(seg.asSlice(index * sizeof()), x);
    }

    public static jpegxl_free_func free(MemorySegment segment, ResourceScope scope) {
        return jpegxl_free_func.ofAddress(free$get(segment), scope);
    }

    public static long sizeof() {
        return $LAYOUT().byteSize();
    }

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate($LAYOUT());
    }

    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }

    public static MemorySegment allocate(ResourceScope scope) {
        return allocate(SegmentAllocator.nativeAllocator(scope));
    }

    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }

    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) {
        return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope);
    }
}


