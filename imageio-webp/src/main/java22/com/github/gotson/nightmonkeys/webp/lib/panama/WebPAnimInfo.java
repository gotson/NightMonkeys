// Generated by jextract

package com.github.gotson.nightmonkeys.webp.lib.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct WebPAnimInfo {
 *     uint32_t canvas_width;
 *     uint32_t canvas_height;
 *     uint32_t loop_count;
 *     uint32_t bgcolor;
 *     uint32_t frame_count;
 *     uint32_t pad[4];
 * }
 * }
 */
public class WebPAnimInfo {

    WebPAnimInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        demux_h.C_INT.withName("canvas_width"),
        demux_h.C_INT.withName("canvas_height"),
        demux_h.C_INT.withName("loop_count"),
        demux_h.C_INT.withName("bgcolor"),
        demux_h.C_INT.withName("frame_count"),
        MemoryLayout.sequenceLayout(4, demux_h.C_INT).withName("pad")
    ).withName("WebPAnimInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt canvas_width$LAYOUT = (OfInt)$LAYOUT.select(groupElement("canvas_width"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t canvas_width
     * }
     */
    public static final OfInt canvas_width$layout() {
        return canvas_width$LAYOUT;
    }

    private static final long canvas_width$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t canvas_width
     * }
     */
    public static final long canvas_width$offset() {
        return canvas_width$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t canvas_width
     * }
     */
    public static int canvas_width(MemorySegment struct) {
        return struct.get(canvas_width$LAYOUT, canvas_width$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t canvas_width
     * }
     */
    public static void canvas_width(MemorySegment struct, int fieldValue) {
        struct.set(canvas_width$LAYOUT, canvas_width$OFFSET, fieldValue);
    }

    private static final OfInt canvas_height$LAYOUT = (OfInt)$LAYOUT.select(groupElement("canvas_height"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t canvas_height
     * }
     */
    public static final OfInt canvas_height$layout() {
        return canvas_height$LAYOUT;
    }

    private static final long canvas_height$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t canvas_height
     * }
     */
    public static final long canvas_height$offset() {
        return canvas_height$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t canvas_height
     * }
     */
    public static int canvas_height(MemorySegment struct) {
        return struct.get(canvas_height$LAYOUT, canvas_height$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t canvas_height
     * }
     */
    public static void canvas_height(MemorySegment struct, int fieldValue) {
        struct.set(canvas_height$LAYOUT, canvas_height$OFFSET, fieldValue);
    }

    private static final OfInt loop_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("loop_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t loop_count
     * }
     */
    public static final OfInt loop_count$layout() {
        return loop_count$LAYOUT;
    }

    private static final long loop_count$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t loop_count
     * }
     */
    public static final long loop_count$offset() {
        return loop_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t loop_count
     * }
     */
    public static int loop_count(MemorySegment struct) {
        return struct.get(loop_count$LAYOUT, loop_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t loop_count
     * }
     */
    public static void loop_count(MemorySegment struct, int fieldValue) {
        struct.set(loop_count$LAYOUT, loop_count$OFFSET, fieldValue);
    }

    private static final OfInt bgcolor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bgcolor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t bgcolor
     * }
     */
    public static final OfInt bgcolor$layout() {
        return bgcolor$LAYOUT;
    }

    private static final long bgcolor$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t bgcolor
     * }
     */
    public static final long bgcolor$offset() {
        return bgcolor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t bgcolor
     * }
     */
    public static int bgcolor(MemorySegment struct) {
        return struct.get(bgcolor$LAYOUT, bgcolor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t bgcolor
     * }
     */
    public static void bgcolor(MemorySegment struct, int fieldValue) {
        struct.set(bgcolor$LAYOUT, bgcolor$OFFSET, fieldValue);
    }

    private static final OfInt frame_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("frame_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t frame_count
     * }
     */
    public static final OfInt frame_count$layout() {
        return frame_count$LAYOUT;
    }

    private static final long frame_count$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t frame_count
     * }
     */
    public static final long frame_count$offset() {
        return frame_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t frame_count
     * }
     */
    public static int frame_count(MemorySegment struct) {
        return struct.get(frame_count$LAYOUT, frame_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t frame_count
     * }
     */
    public static void frame_count(MemorySegment struct, int fieldValue) {
        struct.set(frame_count$LAYOUT, frame_count$OFFSET, fieldValue);
    }

    private static final SequenceLayout pad$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("pad"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t pad[4]
     * }
     */
    public static final SequenceLayout pad$layout() {
        return pad$LAYOUT;
    }

    private static final long pad$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t pad[4]
     * }
     */
    public static final long pad$offset() {
        return pad$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t pad[4]
     * }
     */
    public static MemorySegment pad(MemorySegment struct) {
        return struct.asSlice(pad$OFFSET, pad$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t pad[4]
     * }
     */
    public static void pad(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pad$OFFSET, pad$LAYOUT.byteSize());
    }

    private static long[] pad$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t pad[4]
     * }
     */
    public static long[] pad$dimensions() {
        return pad$DIMS;
    }
    private static final VarHandle pad$ELEM_HANDLE = pad$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t pad[4]
     * }
     */
    public static int pad(MemorySegment struct, long index0) {
        return (int)pad$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t pad[4]
     * }
     */
    public static void pad(MemorySegment struct, long index0, int fieldValue) {
        pad$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

