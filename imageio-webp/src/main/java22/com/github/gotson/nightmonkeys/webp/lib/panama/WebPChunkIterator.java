// Generated by jextract

package com.github.gotson.nightmonkeys.webp.lib.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct WebPChunkIterator {
 *     int chunk_num;
 *     int num_chunks;
 *     WebPData chunk;
 *     uint32_t pad[6];
 *     void *private_;
 * }
 * }
 */
public class WebPChunkIterator {

    WebPChunkIterator() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        demux_h.C_INT.withName("chunk_num"),
        demux_h.C_INT.withName("num_chunks"),
        WebPData.layout().withName("chunk"),
        MemoryLayout.sequenceLayout(6, demux_h.C_INT).withName("pad"),
        demux_h.C_POINTER.withName("private_")
    ).withName("WebPChunkIterator");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt chunk_num$LAYOUT = (OfInt)$LAYOUT.select(groupElement("chunk_num"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int chunk_num
     * }
     */
    public static final OfInt chunk_num$layout() {
        return chunk_num$LAYOUT;
    }

    private static final long chunk_num$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int chunk_num
     * }
     */
    public static final long chunk_num$offset() {
        return chunk_num$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int chunk_num
     * }
     */
    public static int chunk_num(MemorySegment struct) {
        return struct.get(chunk_num$LAYOUT, chunk_num$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int chunk_num
     * }
     */
    public static void chunk_num(MemorySegment struct, int fieldValue) {
        struct.set(chunk_num$LAYOUT, chunk_num$OFFSET, fieldValue);
    }

    private static final OfInt num_chunks$LAYOUT = (OfInt)$LAYOUT.select(groupElement("num_chunks"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int num_chunks
     * }
     */
    public static final OfInt num_chunks$layout() {
        return num_chunks$LAYOUT;
    }

    private static final long num_chunks$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int num_chunks
     * }
     */
    public static final long num_chunks$offset() {
        return num_chunks$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int num_chunks
     * }
     */
    public static int num_chunks(MemorySegment struct) {
        return struct.get(num_chunks$LAYOUT, num_chunks$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int num_chunks
     * }
     */
    public static void num_chunks(MemorySegment struct, int fieldValue) {
        struct.set(num_chunks$LAYOUT, num_chunks$OFFSET, fieldValue);
    }

    private static final GroupLayout chunk$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("chunk"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WebPData chunk
     * }
     */
    public static final GroupLayout chunk$layout() {
        return chunk$LAYOUT;
    }

    private static final long chunk$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WebPData chunk
     * }
     */
    public static final long chunk$offset() {
        return chunk$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WebPData chunk
     * }
     */
    public static MemorySegment chunk(MemorySegment struct) {
        return struct.asSlice(chunk$OFFSET, chunk$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WebPData chunk
     * }
     */
    public static void chunk(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, chunk$OFFSET, chunk$LAYOUT.byteSize());
    }

    private static final SequenceLayout pad$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("pad"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t pad[6]
     * }
     */
    public static final SequenceLayout pad$layout() {
        return pad$LAYOUT;
    }

    private static final long pad$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t pad[6]
     * }
     */
    public static final long pad$offset() {
        return pad$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t pad[6]
     * }
     */
    public static MemorySegment pad(MemorySegment struct) {
        return struct.asSlice(pad$OFFSET, pad$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t pad[6]
     * }
     */
    public static void pad(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pad$OFFSET, pad$LAYOUT.byteSize());
    }

    private static long[] pad$DIMS = { 6 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t pad[6]
     * }
     */
    public static long[] pad$dimensions() {
        return pad$DIMS;
    }
    private static final VarHandle pad$ELEM_HANDLE = pad$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t pad[6]
     * }
     */
    public static int pad(MemorySegment struct, long index0) {
        return (int)pad$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t pad[6]
     * }
     */
    public static void pad(MemorySegment struct, long index0, int fieldValue) {
        pad$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final AddressLayout private_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("private_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *private_
     * }
     */
    public static final AddressLayout private_$layout() {
        return private_$LAYOUT;
    }

    private static final long private_$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *private_
     * }
     */
    public static final long private_$offset() {
        return private_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *private_
     * }
     */
    public static MemorySegment private_(MemorySegment struct) {
        return struct.get(private_$LAYOUT, private_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *private_
     * }
     */
    public static void private_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(private_$LAYOUT, private_$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

