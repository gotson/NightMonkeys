// Generated by jextract

package com.github.gotson.nightmonkeys.webp.lib.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct WebPDecoderConfig {
 *     WebPBitstreamFeatures input;
 *     WebPDecBuffer output;
 *     WebPDecoderOptions options;
 * }
 * }
 */
public class WebPDecoderConfig {

    WebPDecoderConfig() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        WebPBitstreamFeatures.layout().withName("input"),
        WebPDecBuffer.layout().withName("output"),
        WebPDecoderOptions.layout().withName("options"),
        MemoryLayout.paddingLayout(4)
    ).withName("WebPDecoderConfig");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout input$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("input"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WebPBitstreamFeatures input
     * }
     */
    public static final GroupLayout input$layout() {
        return input$LAYOUT;
    }

    private static final long input$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WebPBitstreamFeatures input
     * }
     */
    public static final long input$offset() {
        return input$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WebPBitstreamFeatures input
     * }
     */
    public static MemorySegment input(MemorySegment struct) {
        return struct.asSlice(input$OFFSET, input$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WebPBitstreamFeatures input
     * }
     */
    public static void input(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, input$OFFSET, input$LAYOUT.byteSize());
    }

    private static final GroupLayout output$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("output"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WebPDecBuffer output
     * }
     */
    public static final GroupLayout output$layout() {
        return output$LAYOUT;
    }

    private static final long output$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WebPDecBuffer output
     * }
     */
    public static final long output$offset() {
        return output$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WebPDecBuffer output
     * }
     */
    public static MemorySegment output(MemorySegment struct) {
        return struct.asSlice(output$OFFSET, output$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WebPDecBuffer output
     * }
     */
    public static void output(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, output$OFFSET, output$LAYOUT.byteSize());
    }

    private static final GroupLayout options$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("options"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WebPDecoderOptions options
     * }
     */
    public static final GroupLayout options$layout() {
        return options$LAYOUT;
    }

    private static final long options$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WebPDecoderOptions options
     * }
     */
    public static final long options$offset() {
        return options$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WebPDecoderOptions options
     * }
     */
    public static MemorySegment options(MemorySegment struct) {
        return struct.asSlice(options$OFFSET, options$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WebPDecoderOptions options
     * }
     */
    public static void options(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, options$OFFSET, options$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

