// Generated by jextract

package com.github.gotson.nightmonkeys.webp.lib.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class decode_h {

    decode_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.libraryLookup(System.mapLibraryName("webp"), LIBRARY_ARENA)
            .or(SymbolLookup.loaderLookup())
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfInt C_LONG = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfDouble C_LONG_DOUBLE = ValueLayout.JAVA_DOUBLE;
    private static final int WEBP_DECODER_ABI_VERSION = (int)521L;
    /**
     * {@snippet lang=c :
     * #define WEBP_DECODER_ABI_VERSION 521
     * }
     */
    public static int WEBP_DECODER_ABI_VERSION() {
        return WEBP_DECODER_ABI_VERSION;
    }
    /**
     * {@snippet lang=c :
     * typedef long long ptrdiff_t
     * }
     */
    public static final OfLong ptrdiff_t = decode_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long size_t
     * }
     */
    public static final OfLong size_t = decode_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned short wchar_t
     * }
     */
    public static final OfShort wchar_t = decode_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef double max_align_t
     * }
     */
    public static final OfDouble max_align_t = decode_h.C_DOUBLE;
    /**
     * {@snippet lang=c :
     * typedef signed char int8_t
     * }
     */
    public static final OfByte int8_t = decode_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char uint8_t
     * }
     */
    public static final OfByte uint8_t = decode_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short int16_t
     * }
     */
    public static final OfShort int16_t = decode_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short uint16_t
     * }
     */
    public static final OfShort uint16_t = decode_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int int32_t
     * }
     */
    public static final OfInt int32_t = decode_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int uint32_t
     * }
     */
    public static final OfInt uint32_t = decode_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long uint64_t
     * }
     */
    public static final OfLong uint64_t = decode_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef long long int64_t
     * }
     */
    public static final OfLong int64_t = decode_h.C_LONG_LONG;

    private static class WebPMalloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_POINTER,
            decode_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("WebPMalloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *WebPMalloc(size_t size)
     * }
     */
    public static FunctionDescriptor WebPMalloc$descriptor() {
        return WebPMalloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *WebPMalloc(size_t size)
     * }
     */
    public static MethodHandle WebPMalloc$handle() {
        return WebPMalloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *WebPMalloc(size_t size)
     * }
     */
    public static MemorySegment WebPMalloc$address() {
        return WebPMalloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *WebPMalloc(size_t size)
     * }
     */
    public static MemorySegment WebPMalloc(long size) {
        var mh$ = WebPMalloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPMalloc", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("WebPFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void WebPFree(void *ptr)
     * }
     */
    public static FunctionDescriptor WebPFree$descriptor() {
        return WebPFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void WebPFree(void *ptr)
     * }
     */
    public static MethodHandle WebPFree$handle() {
        return WebPFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void WebPFree(void *ptr)
     * }
     */
    public static MemorySegment WebPFree$address() {
        return WebPFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void WebPFree(void *ptr)
     * }
     */
    public static void WebPFree(MemorySegment ptr) {
        var mh$ = WebPFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPFree", ptr);
            }
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPGetDecoderVersion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT    );

        public static final MemorySegment ADDR = decode_h.findOrThrow("WebPGetDecoderVersion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPGetDecoderVersion()
     * }
     */
    public static FunctionDescriptor WebPGetDecoderVersion$descriptor() {
        return WebPGetDecoderVersion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPGetDecoderVersion()
     * }
     */
    public static MethodHandle WebPGetDecoderVersion$handle() {
        return WebPGetDecoderVersion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPGetDecoderVersion()
     * }
     */
    public static MemorySegment WebPGetDecoderVersion$address() {
        return WebPGetDecoderVersion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPGetDecoderVersion()
     * }
     */
    public static int WebPGetDecoderVersion() {
        var mh$ = WebPGetDecoderVersion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPGetDecoderVersion");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPGetInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_LONG_LONG,
            decode_h.C_POINTER,
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("WebPGetInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPGetInfo(const uint8_t *data, size_t data_size, int *width, int *height)
     * }
     */
    public static FunctionDescriptor WebPGetInfo$descriptor() {
        return WebPGetInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPGetInfo(const uint8_t *data, size_t data_size, int *width, int *height)
     * }
     */
    public static MethodHandle WebPGetInfo$handle() {
        return WebPGetInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPGetInfo(const uint8_t *data, size_t data_size, int *width, int *height)
     * }
     */
    public static MemorySegment WebPGetInfo$address() {
        return WebPGetInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPGetInfo(const uint8_t *data, size_t data_size, int *width, int *height)
     * }
     */
    public static int WebPGetInfo(MemorySegment data, long data_size, MemorySegment width, MemorySegment height) {
        var mh$ = WebPGetInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPGetInfo", data, data_size, width, height);
            }
            return (int)mh$.invokeExact(data, data_size, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPDecodeRGBA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_LONG_LONG,
            decode_h.C_POINTER,
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("WebPDecodeRGBA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeRGBA(const uint8_t *data, size_t data_size, int *width, int *height)
     * }
     */
    public static FunctionDescriptor WebPDecodeRGBA$descriptor() {
        return WebPDecodeRGBA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeRGBA(const uint8_t *data, size_t data_size, int *width, int *height)
     * }
     */
    public static MethodHandle WebPDecodeRGBA$handle() {
        return WebPDecodeRGBA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeRGBA(const uint8_t *data, size_t data_size, int *width, int *height)
     * }
     */
    public static MemorySegment WebPDecodeRGBA$address() {
        return WebPDecodeRGBA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeRGBA(const uint8_t *data, size_t data_size, int *width, int *height)
     * }
     */
    public static MemorySegment WebPDecodeRGBA(MemorySegment data, long data_size, MemorySegment width, MemorySegment height) {
        var mh$ = WebPDecodeRGBA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPDecodeRGBA", data, data_size, width, height);
            }
            return (MemorySegment)mh$.invokeExact(data, data_size, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPDecodeARGB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_LONG_LONG,
            decode_h.C_POINTER,
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("WebPDecodeARGB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeARGB(const uint8_t *data, size_t data_size, int *width, int *height)
     * }
     */
    public static FunctionDescriptor WebPDecodeARGB$descriptor() {
        return WebPDecodeARGB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeARGB(const uint8_t *data, size_t data_size, int *width, int *height)
     * }
     */
    public static MethodHandle WebPDecodeARGB$handle() {
        return WebPDecodeARGB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeARGB(const uint8_t *data, size_t data_size, int *width, int *height)
     * }
     */
    public static MemorySegment WebPDecodeARGB$address() {
        return WebPDecodeARGB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeARGB(const uint8_t *data, size_t data_size, int *width, int *height)
     * }
     */
    public static MemorySegment WebPDecodeARGB(MemorySegment data, long data_size, MemorySegment width, MemorySegment height) {
        var mh$ = WebPDecodeARGB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPDecodeARGB", data, data_size, width, height);
            }
            return (MemorySegment)mh$.invokeExact(data, data_size, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPDecodeBGRA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_LONG_LONG,
            decode_h.C_POINTER,
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("WebPDecodeBGRA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeBGRA(const uint8_t *data, size_t data_size, int *width, int *height)
     * }
     */
    public static FunctionDescriptor WebPDecodeBGRA$descriptor() {
        return WebPDecodeBGRA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeBGRA(const uint8_t *data, size_t data_size, int *width, int *height)
     * }
     */
    public static MethodHandle WebPDecodeBGRA$handle() {
        return WebPDecodeBGRA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeBGRA(const uint8_t *data, size_t data_size, int *width, int *height)
     * }
     */
    public static MemorySegment WebPDecodeBGRA$address() {
        return WebPDecodeBGRA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeBGRA(const uint8_t *data, size_t data_size, int *width, int *height)
     * }
     */
    public static MemorySegment WebPDecodeBGRA(MemorySegment data, long data_size, MemorySegment width, MemorySegment height) {
        var mh$ = WebPDecodeBGRA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPDecodeBGRA", data, data_size, width, height);
            }
            return (MemorySegment)mh$.invokeExact(data, data_size, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPDecodeRGB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_LONG_LONG,
            decode_h.C_POINTER,
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("WebPDecodeRGB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeRGB(const uint8_t *data, size_t data_size, int *width, int *height)
     * }
     */
    public static FunctionDescriptor WebPDecodeRGB$descriptor() {
        return WebPDecodeRGB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeRGB(const uint8_t *data, size_t data_size, int *width, int *height)
     * }
     */
    public static MethodHandle WebPDecodeRGB$handle() {
        return WebPDecodeRGB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeRGB(const uint8_t *data, size_t data_size, int *width, int *height)
     * }
     */
    public static MemorySegment WebPDecodeRGB$address() {
        return WebPDecodeRGB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeRGB(const uint8_t *data, size_t data_size, int *width, int *height)
     * }
     */
    public static MemorySegment WebPDecodeRGB(MemorySegment data, long data_size, MemorySegment width, MemorySegment height) {
        var mh$ = WebPDecodeRGB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPDecodeRGB", data, data_size, width, height);
            }
            return (MemorySegment)mh$.invokeExact(data, data_size, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPDecodeBGR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_LONG_LONG,
            decode_h.C_POINTER,
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("WebPDecodeBGR");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeBGR(const uint8_t *data, size_t data_size, int *width, int *height)
     * }
     */
    public static FunctionDescriptor WebPDecodeBGR$descriptor() {
        return WebPDecodeBGR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeBGR(const uint8_t *data, size_t data_size, int *width, int *height)
     * }
     */
    public static MethodHandle WebPDecodeBGR$handle() {
        return WebPDecodeBGR.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeBGR(const uint8_t *data, size_t data_size, int *width, int *height)
     * }
     */
    public static MemorySegment WebPDecodeBGR$address() {
        return WebPDecodeBGR.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeBGR(const uint8_t *data, size_t data_size, int *width, int *height)
     * }
     */
    public static MemorySegment WebPDecodeBGR(MemorySegment data, long data_size, MemorySegment width, MemorySegment height) {
        var mh$ = WebPDecodeBGR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPDecodeBGR", data, data_size, width, height);
            }
            return (MemorySegment)mh$.invokeExact(data, data_size, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPDecodeYUV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_LONG_LONG,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("WebPDecodeYUV");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeYUV(const uint8_t *data, size_t data_size, int *width, int *height, uint8_t **u, uint8_t **v, int *stride, int *uv_stride)
     * }
     */
    public static FunctionDescriptor WebPDecodeYUV$descriptor() {
        return WebPDecodeYUV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeYUV(const uint8_t *data, size_t data_size, int *width, int *height, uint8_t **u, uint8_t **v, int *stride, int *uv_stride)
     * }
     */
    public static MethodHandle WebPDecodeYUV$handle() {
        return WebPDecodeYUV.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeYUV(const uint8_t *data, size_t data_size, int *width, int *height, uint8_t **u, uint8_t **v, int *stride, int *uv_stride)
     * }
     */
    public static MemorySegment WebPDecodeYUV$address() {
        return WebPDecodeYUV.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeYUV(const uint8_t *data, size_t data_size, int *width, int *height, uint8_t **u, uint8_t **v, int *stride, int *uv_stride)
     * }
     */
    public static MemorySegment WebPDecodeYUV(MemorySegment data, long data_size, MemorySegment width, MemorySegment height, MemorySegment u, MemorySegment v, MemorySegment stride, MemorySegment uv_stride) {
        var mh$ = WebPDecodeYUV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPDecodeYUV", data, data_size, width, height, u, v, stride, uv_stride);
            }
            return (MemorySegment)mh$.invokeExact(data, data_size, width, height, u, v, stride, uv_stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPDecodeRGBAInto {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_LONG_LONG,
            decode_h.C_POINTER,
            decode_h.C_LONG_LONG,
            decode_h.C_INT
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("WebPDecodeRGBAInto");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeRGBAInto(const uint8_t *data, size_t data_size, uint8_t *output_buffer, size_t output_buffer_size, int output_stride)
     * }
     */
    public static FunctionDescriptor WebPDecodeRGBAInto$descriptor() {
        return WebPDecodeRGBAInto.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeRGBAInto(const uint8_t *data, size_t data_size, uint8_t *output_buffer, size_t output_buffer_size, int output_stride)
     * }
     */
    public static MethodHandle WebPDecodeRGBAInto$handle() {
        return WebPDecodeRGBAInto.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeRGBAInto(const uint8_t *data, size_t data_size, uint8_t *output_buffer, size_t output_buffer_size, int output_stride)
     * }
     */
    public static MemorySegment WebPDecodeRGBAInto$address() {
        return WebPDecodeRGBAInto.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeRGBAInto(const uint8_t *data, size_t data_size, uint8_t *output_buffer, size_t output_buffer_size, int output_stride)
     * }
     */
    public static MemorySegment WebPDecodeRGBAInto(MemorySegment data, long data_size, MemorySegment output_buffer, long output_buffer_size, int output_stride) {
        var mh$ = WebPDecodeRGBAInto.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPDecodeRGBAInto", data, data_size, output_buffer, output_buffer_size, output_stride);
            }
            return (MemorySegment)mh$.invokeExact(data, data_size, output_buffer, output_buffer_size, output_stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPDecodeARGBInto {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_LONG_LONG,
            decode_h.C_POINTER,
            decode_h.C_LONG_LONG,
            decode_h.C_INT
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("WebPDecodeARGBInto");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeARGBInto(const uint8_t *data, size_t data_size, uint8_t *output_buffer, size_t output_buffer_size, int output_stride)
     * }
     */
    public static FunctionDescriptor WebPDecodeARGBInto$descriptor() {
        return WebPDecodeARGBInto.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeARGBInto(const uint8_t *data, size_t data_size, uint8_t *output_buffer, size_t output_buffer_size, int output_stride)
     * }
     */
    public static MethodHandle WebPDecodeARGBInto$handle() {
        return WebPDecodeARGBInto.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeARGBInto(const uint8_t *data, size_t data_size, uint8_t *output_buffer, size_t output_buffer_size, int output_stride)
     * }
     */
    public static MemorySegment WebPDecodeARGBInto$address() {
        return WebPDecodeARGBInto.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeARGBInto(const uint8_t *data, size_t data_size, uint8_t *output_buffer, size_t output_buffer_size, int output_stride)
     * }
     */
    public static MemorySegment WebPDecodeARGBInto(MemorySegment data, long data_size, MemorySegment output_buffer, long output_buffer_size, int output_stride) {
        var mh$ = WebPDecodeARGBInto.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPDecodeARGBInto", data, data_size, output_buffer, output_buffer_size, output_stride);
            }
            return (MemorySegment)mh$.invokeExact(data, data_size, output_buffer, output_buffer_size, output_stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPDecodeBGRAInto {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_LONG_LONG,
            decode_h.C_POINTER,
            decode_h.C_LONG_LONG,
            decode_h.C_INT
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("WebPDecodeBGRAInto");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeBGRAInto(const uint8_t *data, size_t data_size, uint8_t *output_buffer, size_t output_buffer_size, int output_stride)
     * }
     */
    public static FunctionDescriptor WebPDecodeBGRAInto$descriptor() {
        return WebPDecodeBGRAInto.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeBGRAInto(const uint8_t *data, size_t data_size, uint8_t *output_buffer, size_t output_buffer_size, int output_stride)
     * }
     */
    public static MethodHandle WebPDecodeBGRAInto$handle() {
        return WebPDecodeBGRAInto.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeBGRAInto(const uint8_t *data, size_t data_size, uint8_t *output_buffer, size_t output_buffer_size, int output_stride)
     * }
     */
    public static MemorySegment WebPDecodeBGRAInto$address() {
        return WebPDecodeBGRAInto.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeBGRAInto(const uint8_t *data, size_t data_size, uint8_t *output_buffer, size_t output_buffer_size, int output_stride)
     * }
     */
    public static MemorySegment WebPDecodeBGRAInto(MemorySegment data, long data_size, MemorySegment output_buffer, long output_buffer_size, int output_stride) {
        var mh$ = WebPDecodeBGRAInto.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPDecodeBGRAInto", data, data_size, output_buffer, output_buffer_size, output_stride);
            }
            return (MemorySegment)mh$.invokeExact(data, data_size, output_buffer, output_buffer_size, output_stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPDecodeRGBInto {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_LONG_LONG,
            decode_h.C_POINTER,
            decode_h.C_LONG_LONG,
            decode_h.C_INT
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("WebPDecodeRGBInto");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeRGBInto(const uint8_t *data, size_t data_size, uint8_t *output_buffer, size_t output_buffer_size, int output_stride)
     * }
     */
    public static FunctionDescriptor WebPDecodeRGBInto$descriptor() {
        return WebPDecodeRGBInto.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeRGBInto(const uint8_t *data, size_t data_size, uint8_t *output_buffer, size_t output_buffer_size, int output_stride)
     * }
     */
    public static MethodHandle WebPDecodeRGBInto$handle() {
        return WebPDecodeRGBInto.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeRGBInto(const uint8_t *data, size_t data_size, uint8_t *output_buffer, size_t output_buffer_size, int output_stride)
     * }
     */
    public static MemorySegment WebPDecodeRGBInto$address() {
        return WebPDecodeRGBInto.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeRGBInto(const uint8_t *data, size_t data_size, uint8_t *output_buffer, size_t output_buffer_size, int output_stride)
     * }
     */
    public static MemorySegment WebPDecodeRGBInto(MemorySegment data, long data_size, MemorySegment output_buffer, long output_buffer_size, int output_stride) {
        var mh$ = WebPDecodeRGBInto.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPDecodeRGBInto", data, data_size, output_buffer, output_buffer_size, output_stride);
            }
            return (MemorySegment)mh$.invokeExact(data, data_size, output_buffer, output_buffer_size, output_stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPDecodeBGRInto {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_LONG_LONG,
            decode_h.C_POINTER,
            decode_h.C_LONG_LONG,
            decode_h.C_INT
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("WebPDecodeBGRInto");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeBGRInto(const uint8_t *data, size_t data_size, uint8_t *output_buffer, size_t output_buffer_size, int output_stride)
     * }
     */
    public static FunctionDescriptor WebPDecodeBGRInto$descriptor() {
        return WebPDecodeBGRInto.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeBGRInto(const uint8_t *data, size_t data_size, uint8_t *output_buffer, size_t output_buffer_size, int output_stride)
     * }
     */
    public static MethodHandle WebPDecodeBGRInto$handle() {
        return WebPDecodeBGRInto.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeBGRInto(const uint8_t *data, size_t data_size, uint8_t *output_buffer, size_t output_buffer_size, int output_stride)
     * }
     */
    public static MemorySegment WebPDecodeBGRInto$address() {
        return WebPDecodeBGRInto.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeBGRInto(const uint8_t *data, size_t data_size, uint8_t *output_buffer, size_t output_buffer_size, int output_stride)
     * }
     */
    public static MemorySegment WebPDecodeBGRInto(MemorySegment data, long data_size, MemorySegment output_buffer, long output_buffer_size, int output_stride) {
        var mh$ = WebPDecodeBGRInto.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPDecodeBGRInto", data, data_size, output_buffer, output_buffer_size, output_stride);
            }
            return (MemorySegment)mh$.invokeExact(data, data_size, output_buffer, output_buffer_size, output_stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPDecodeYUVInto {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_LONG_LONG,
            decode_h.C_POINTER,
            decode_h.C_LONG_LONG,
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_LONG_LONG,
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_LONG_LONG,
            decode_h.C_INT
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("WebPDecodeYUVInto");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeYUVInto(const uint8_t *data, size_t data_size, uint8_t *luma, size_t luma_size, int luma_stride, uint8_t *u, size_t u_size, int u_stride, uint8_t *v, size_t v_size, int v_stride)
     * }
     */
    public static FunctionDescriptor WebPDecodeYUVInto$descriptor() {
        return WebPDecodeYUVInto.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeYUVInto(const uint8_t *data, size_t data_size, uint8_t *luma, size_t luma_size, int luma_stride, uint8_t *u, size_t u_size, int u_stride, uint8_t *v, size_t v_size, int v_stride)
     * }
     */
    public static MethodHandle WebPDecodeYUVInto$handle() {
        return WebPDecodeYUVInto.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeYUVInto(const uint8_t *data, size_t data_size, uint8_t *luma, size_t luma_size, int luma_stride, uint8_t *u, size_t u_size, int u_stride, uint8_t *v, size_t v_size, int v_stride)
     * }
     */
    public static MemorySegment WebPDecodeYUVInto$address() {
        return WebPDecodeYUVInto.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint8_t *WebPDecodeYUVInto(const uint8_t *data, size_t data_size, uint8_t *luma, size_t luma_size, int luma_stride, uint8_t *u, size_t u_size, int u_stride, uint8_t *v, size_t v_size, int v_stride)
     * }
     */
    public static MemorySegment WebPDecodeYUVInto(MemorySegment data, long data_size, MemorySegment luma, long luma_size, int luma_stride, MemorySegment u, long u_size, int u_stride, MemorySegment v, long v_size, int v_stride) {
        var mh$ = WebPDecodeYUVInto.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPDecodeYUVInto", data, data_size, luma, luma_size, luma_stride, u, u_size, u_stride, v, v_size, v_stride);
            }
            return (MemorySegment)mh$.invokeExact(data, data_size, luma, luma_size, luma_stride, u, u_size, u_stride, v, v_size, v_stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int MODE_RGB = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WEBP_CSP_MODE.MODE_RGB = 0
     * }
     */
    public static int MODE_RGB() {
        return MODE_RGB;
    }
    private static final int MODE_RGBA = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WEBP_CSP_MODE.MODE_RGBA = 1
     * }
     */
    public static int MODE_RGBA() {
        return MODE_RGBA;
    }
    private static final int MODE_BGR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WEBP_CSP_MODE.MODE_BGR = 2
     * }
     */
    public static int MODE_BGR() {
        return MODE_BGR;
    }
    private static final int MODE_BGRA = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WEBP_CSP_MODE.MODE_BGRA = 3
     * }
     */
    public static int MODE_BGRA() {
        return MODE_BGRA;
    }
    private static final int MODE_ARGB = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WEBP_CSP_MODE.MODE_ARGB = 4
     * }
     */
    public static int MODE_ARGB() {
        return MODE_ARGB;
    }
    private static final int MODE_RGBA_4444 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum WEBP_CSP_MODE.MODE_RGBA_4444 = 5
     * }
     */
    public static int MODE_RGBA_4444() {
        return MODE_RGBA_4444;
    }
    private static final int MODE_RGB_565 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum WEBP_CSP_MODE.MODE_RGB_565 = 6
     * }
     */
    public static int MODE_RGB_565() {
        return MODE_RGB_565;
    }
    private static final int MODE_rgbA = (int)7L;
    /**
     * {@snippet lang=c :
     * enum WEBP_CSP_MODE.MODE_rgbA = 7
     * }
     */
    public static int MODE_rgbA() {
        return MODE_rgbA;
    }
    private static final int MODE_bgrA = (int)8L;
    /**
     * {@snippet lang=c :
     * enum WEBP_CSP_MODE.MODE_bgrA = 8
     * }
     */
    public static int MODE_bgrA() {
        return MODE_bgrA;
    }
    private static final int MODE_Argb = (int)9L;
    /**
     * {@snippet lang=c :
     * enum WEBP_CSP_MODE.MODE_Argb = 9
     * }
     */
    public static int MODE_Argb() {
        return MODE_Argb;
    }
    private static final int MODE_rgbA_4444 = (int)10L;
    /**
     * {@snippet lang=c :
     * enum WEBP_CSP_MODE.MODE_rgbA_4444 = 10
     * }
     */
    public static int MODE_rgbA_4444() {
        return MODE_rgbA_4444;
    }
    private static final int MODE_YUV = (int)11L;
    /**
     * {@snippet lang=c :
     * enum WEBP_CSP_MODE.MODE_YUV = 11
     * }
     */
    public static int MODE_YUV() {
        return MODE_YUV;
    }
    private static final int MODE_YUVA = (int)12L;
    /**
     * {@snippet lang=c :
     * enum WEBP_CSP_MODE.MODE_YUVA = 12
     * }
     */
    public static int MODE_YUVA() {
        return MODE_YUVA;
    }
    private static final int MODE_LAST = (int)13L;
    /**
     * {@snippet lang=c :
     * enum WEBP_CSP_MODE.MODE_LAST = 13
     * }
     */
    public static int MODE_LAST() {
        return MODE_LAST;
    }

    private static class WebPInitDecBufferInternal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_INT
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("WebPInitDecBufferInternal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPInitDecBufferInternal(WebPDecBuffer *, int)
     * }
     */
    public static FunctionDescriptor WebPInitDecBufferInternal$descriptor() {
        return WebPInitDecBufferInternal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPInitDecBufferInternal(WebPDecBuffer *, int)
     * }
     */
    public static MethodHandle WebPInitDecBufferInternal$handle() {
        return WebPInitDecBufferInternal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPInitDecBufferInternal(WebPDecBuffer *, int)
     * }
     */
    public static MemorySegment WebPInitDecBufferInternal$address() {
        return WebPInitDecBufferInternal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPInitDecBufferInternal(WebPDecBuffer *, int)
     * }
     */
    public static int WebPInitDecBufferInternal(MemorySegment x0, int x1) {
        var mh$ = WebPInitDecBufferInternal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPInitDecBufferInternal", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPFreeDecBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("WebPFreeDecBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void WebPFreeDecBuffer(WebPDecBuffer *buffer)
     * }
     */
    public static FunctionDescriptor WebPFreeDecBuffer$descriptor() {
        return WebPFreeDecBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void WebPFreeDecBuffer(WebPDecBuffer *buffer)
     * }
     */
    public static MethodHandle WebPFreeDecBuffer$handle() {
        return WebPFreeDecBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void WebPFreeDecBuffer(WebPDecBuffer *buffer)
     * }
     */
    public static MemorySegment WebPFreeDecBuffer$address() {
        return WebPFreeDecBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void WebPFreeDecBuffer(WebPDecBuffer *buffer)
     * }
     */
    public static void WebPFreeDecBuffer(MemorySegment buffer) {
        var mh$ = WebPFreeDecBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPFreeDecBuffer", buffer);
            }
            mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VP8_STATUS_OK = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VP8StatusCode.VP8_STATUS_OK = 0
     * }
     */
    public static int VP8_STATUS_OK() {
        return VP8_STATUS_OK;
    }
    private static final int VP8_STATUS_OUT_OF_MEMORY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VP8StatusCode.VP8_STATUS_OUT_OF_MEMORY = 1
     * }
     */
    public static int VP8_STATUS_OUT_OF_MEMORY() {
        return VP8_STATUS_OUT_OF_MEMORY;
    }
    private static final int VP8_STATUS_INVALID_PARAM = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VP8StatusCode.VP8_STATUS_INVALID_PARAM = 2
     * }
     */
    public static int VP8_STATUS_INVALID_PARAM() {
        return VP8_STATUS_INVALID_PARAM;
    }
    private static final int VP8_STATUS_BITSTREAM_ERROR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VP8StatusCode.VP8_STATUS_BITSTREAM_ERROR = 3
     * }
     */
    public static int VP8_STATUS_BITSTREAM_ERROR() {
        return VP8_STATUS_BITSTREAM_ERROR;
    }
    private static final int VP8_STATUS_UNSUPPORTED_FEATURE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VP8StatusCode.VP8_STATUS_UNSUPPORTED_FEATURE = 4
     * }
     */
    public static int VP8_STATUS_UNSUPPORTED_FEATURE() {
        return VP8_STATUS_UNSUPPORTED_FEATURE;
    }
    private static final int VP8_STATUS_SUSPENDED = (int)5L;
    /**
     * {@snippet lang=c :
     * enum VP8StatusCode.VP8_STATUS_SUSPENDED = 5
     * }
     */
    public static int VP8_STATUS_SUSPENDED() {
        return VP8_STATUS_SUSPENDED;
    }
    private static final int VP8_STATUS_USER_ABORT = (int)6L;
    /**
     * {@snippet lang=c :
     * enum VP8StatusCode.VP8_STATUS_USER_ABORT = 6
     * }
     */
    public static int VP8_STATUS_USER_ABORT() {
        return VP8_STATUS_USER_ABORT;
    }
    private static final int VP8_STATUS_NOT_ENOUGH_DATA = (int)7L;
    /**
     * {@snippet lang=c :
     * enum VP8StatusCode.VP8_STATUS_NOT_ENOUGH_DATA = 7
     * }
     */
    public static int VP8_STATUS_NOT_ENOUGH_DATA() {
        return VP8_STATUS_NOT_ENOUGH_DATA;
    }

    private static class WebPINewDecoder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_POINTER,
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("WebPINewDecoder");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern WebPIDecoder *WebPINewDecoder(WebPDecBuffer *output_buffer)
     * }
     */
    public static FunctionDescriptor WebPINewDecoder$descriptor() {
        return WebPINewDecoder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern WebPIDecoder *WebPINewDecoder(WebPDecBuffer *output_buffer)
     * }
     */
    public static MethodHandle WebPINewDecoder$handle() {
        return WebPINewDecoder.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern WebPIDecoder *WebPINewDecoder(WebPDecBuffer *output_buffer)
     * }
     */
    public static MemorySegment WebPINewDecoder$address() {
        return WebPINewDecoder.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern WebPIDecoder *WebPINewDecoder(WebPDecBuffer *output_buffer)
     * }
     */
    public static MemorySegment WebPINewDecoder(MemorySegment output_buffer) {
        var mh$ = WebPINewDecoder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPINewDecoder", output_buffer);
            }
            return (MemorySegment)mh$.invokeExact(output_buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPINewRGB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_POINTER,
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_LONG_LONG,
            decode_h.C_INT
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("WebPINewRGB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern WebPIDecoder *WebPINewRGB(WEBP_CSP_MODE csp, uint8_t *output_buffer, size_t output_buffer_size, int output_stride)
     * }
     */
    public static FunctionDescriptor WebPINewRGB$descriptor() {
        return WebPINewRGB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern WebPIDecoder *WebPINewRGB(WEBP_CSP_MODE csp, uint8_t *output_buffer, size_t output_buffer_size, int output_stride)
     * }
     */
    public static MethodHandle WebPINewRGB$handle() {
        return WebPINewRGB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern WebPIDecoder *WebPINewRGB(WEBP_CSP_MODE csp, uint8_t *output_buffer, size_t output_buffer_size, int output_stride)
     * }
     */
    public static MemorySegment WebPINewRGB$address() {
        return WebPINewRGB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern WebPIDecoder *WebPINewRGB(WEBP_CSP_MODE csp, uint8_t *output_buffer, size_t output_buffer_size, int output_stride)
     * }
     */
    public static MemorySegment WebPINewRGB(int csp, MemorySegment output_buffer, long output_buffer_size, int output_stride) {
        var mh$ = WebPINewRGB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPINewRGB", csp, output_buffer, output_buffer_size, output_stride);
            }
            return (MemorySegment)mh$.invokeExact(csp, output_buffer, output_buffer_size, output_stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPINewYUVA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_LONG_LONG,
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_LONG_LONG,
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_LONG_LONG,
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_LONG_LONG,
            decode_h.C_INT
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("WebPINewYUVA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern WebPIDecoder *WebPINewYUVA(uint8_t *luma, size_t luma_size, int luma_stride, uint8_t *u, size_t u_size, int u_stride, uint8_t *v, size_t v_size, int v_stride, uint8_t *a, size_t a_size, int a_stride)
     * }
     */
    public static FunctionDescriptor WebPINewYUVA$descriptor() {
        return WebPINewYUVA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern WebPIDecoder *WebPINewYUVA(uint8_t *luma, size_t luma_size, int luma_stride, uint8_t *u, size_t u_size, int u_stride, uint8_t *v, size_t v_size, int v_stride, uint8_t *a, size_t a_size, int a_stride)
     * }
     */
    public static MethodHandle WebPINewYUVA$handle() {
        return WebPINewYUVA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern WebPIDecoder *WebPINewYUVA(uint8_t *luma, size_t luma_size, int luma_stride, uint8_t *u, size_t u_size, int u_stride, uint8_t *v, size_t v_size, int v_stride, uint8_t *a, size_t a_size, int a_stride)
     * }
     */
    public static MemorySegment WebPINewYUVA$address() {
        return WebPINewYUVA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern WebPIDecoder *WebPINewYUVA(uint8_t *luma, size_t luma_size, int luma_stride, uint8_t *u, size_t u_size, int u_stride, uint8_t *v, size_t v_size, int v_stride, uint8_t *a, size_t a_size, int a_stride)
     * }
     */
    public static MemorySegment WebPINewYUVA(MemorySegment luma, long luma_size, int luma_stride, MemorySegment u, long u_size, int u_stride, MemorySegment v, long v_size, int v_stride, MemorySegment a, long a_size, int a_stride) {
        var mh$ = WebPINewYUVA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPINewYUVA", luma, luma_size, luma_stride, u, u_size, u_stride, v, v_size, v_stride, a, a_size, a_stride);
            }
            return (MemorySegment)mh$.invokeExact(luma, luma_size, luma_stride, u, u_size, u_stride, v, v_size, v_stride, a, a_size, a_stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPINewYUV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_LONG_LONG,
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_LONG_LONG,
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_LONG_LONG,
            decode_h.C_INT
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("WebPINewYUV");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern WebPIDecoder *WebPINewYUV(uint8_t *luma, size_t luma_size, int luma_stride, uint8_t *u, size_t u_size, int u_stride, uint8_t *v, size_t v_size, int v_stride)
     * }
     */
    public static FunctionDescriptor WebPINewYUV$descriptor() {
        return WebPINewYUV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern WebPIDecoder *WebPINewYUV(uint8_t *luma, size_t luma_size, int luma_stride, uint8_t *u, size_t u_size, int u_stride, uint8_t *v, size_t v_size, int v_stride)
     * }
     */
    public static MethodHandle WebPINewYUV$handle() {
        return WebPINewYUV.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern WebPIDecoder *WebPINewYUV(uint8_t *luma, size_t luma_size, int luma_stride, uint8_t *u, size_t u_size, int u_stride, uint8_t *v, size_t v_size, int v_stride)
     * }
     */
    public static MemorySegment WebPINewYUV$address() {
        return WebPINewYUV.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern WebPIDecoder *WebPINewYUV(uint8_t *luma, size_t luma_size, int luma_stride, uint8_t *u, size_t u_size, int u_stride, uint8_t *v, size_t v_size, int v_stride)
     * }
     */
    public static MemorySegment WebPINewYUV(MemorySegment luma, long luma_size, int luma_stride, MemorySegment u, long u_size, int u_stride, MemorySegment v, long v_size, int v_stride) {
        var mh$ = WebPINewYUV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPINewYUV", luma, luma_size, luma_stride, u, u_size, u_stride, v, v_size, v_stride);
            }
            return (MemorySegment)mh$.invokeExact(luma, luma_size, luma_stride, u, u_size, u_stride, v, v_size, v_stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPIDelete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("WebPIDelete");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void WebPIDelete(WebPIDecoder *idec)
     * }
     */
    public static FunctionDescriptor WebPIDelete$descriptor() {
        return WebPIDelete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void WebPIDelete(WebPIDecoder *idec)
     * }
     */
    public static MethodHandle WebPIDelete$handle() {
        return WebPIDelete.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void WebPIDelete(WebPIDecoder *idec)
     * }
     */
    public static MemorySegment WebPIDelete$address() {
        return WebPIDelete.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void WebPIDelete(WebPIDecoder *idec)
     * }
     */
    public static void WebPIDelete(MemorySegment idec) {
        var mh$ = WebPIDelete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPIDelete", idec);
            }
            mh$.invokeExact(idec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPIAppend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("WebPIAppend");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VP8StatusCode WebPIAppend(WebPIDecoder *idec, const uint8_t *data, size_t data_size)
     * }
     */
    public static FunctionDescriptor WebPIAppend$descriptor() {
        return WebPIAppend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VP8StatusCode WebPIAppend(WebPIDecoder *idec, const uint8_t *data, size_t data_size)
     * }
     */
    public static MethodHandle WebPIAppend$handle() {
        return WebPIAppend.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VP8StatusCode WebPIAppend(WebPIDecoder *idec, const uint8_t *data, size_t data_size)
     * }
     */
    public static MemorySegment WebPIAppend$address() {
        return WebPIAppend.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VP8StatusCode WebPIAppend(WebPIDecoder *idec, const uint8_t *data, size_t data_size)
     * }
     */
    public static int WebPIAppend(MemorySegment idec, MemorySegment data, long data_size) {
        var mh$ = WebPIAppend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPIAppend", idec, data, data_size);
            }
            return (int)mh$.invokeExact(idec, data, data_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPIUpdate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("WebPIUpdate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VP8StatusCode WebPIUpdate(WebPIDecoder *idec, const uint8_t *data, size_t data_size)
     * }
     */
    public static FunctionDescriptor WebPIUpdate$descriptor() {
        return WebPIUpdate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VP8StatusCode WebPIUpdate(WebPIDecoder *idec, const uint8_t *data, size_t data_size)
     * }
     */
    public static MethodHandle WebPIUpdate$handle() {
        return WebPIUpdate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VP8StatusCode WebPIUpdate(WebPIDecoder *idec, const uint8_t *data, size_t data_size)
     * }
     */
    public static MemorySegment WebPIUpdate$address() {
        return WebPIUpdate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VP8StatusCode WebPIUpdate(WebPIDecoder *idec, const uint8_t *data, size_t data_size)
     * }
     */
    public static int WebPIUpdate(MemorySegment idec, MemorySegment data, long data_size) {
        var mh$ = WebPIUpdate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPIUpdate", idec, data, data_size);
            }
            return (int)mh$.invokeExact(idec, data, data_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPIDecGetRGB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("WebPIDecGetRGB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint8_t *WebPIDecGetRGB(const WebPIDecoder *idec, int *last_y, int *width, int *height, int *stride)
     * }
     */
    public static FunctionDescriptor WebPIDecGetRGB$descriptor() {
        return WebPIDecGetRGB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint8_t *WebPIDecGetRGB(const WebPIDecoder *idec, int *last_y, int *width, int *height, int *stride)
     * }
     */
    public static MethodHandle WebPIDecGetRGB$handle() {
        return WebPIDecGetRGB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint8_t *WebPIDecGetRGB(const WebPIDecoder *idec, int *last_y, int *width, int *height, int *stride)
     * }
     */
    public static MemorySegment WebPIDecGetRGB$address() {
        return WebPIDecGetRGB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint8_t *WebPIDecGetRGB(const WebPIDecoder *idec, int *last_y, int *width, int *height, int *stride)
     * }
     */
    public static MemorySegment WebPIDecGetRGB(MemorySegment idec, MemorySegment last_y, MemorySegment width, MemorySegment height, MemorySegment stride) {
        var mh$ = WebPIDecGetRGB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPIDecGetRGB", idec, last_y, width, height, stride);
            }
            return (MemorySegment)mh$.invokeExact(idec, last_y, width, height, stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPIDecGetYUVA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("WebPIDecGetYUVA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint8_t *WebPIDecGetYUVA(const WebPIDecoder *idec, int *last_y, uint8_t **u, uint8_t **v, uint8_t **a, int *width, int *height, int *stride, int *uv_stride, int *a_stride)
     * }
     */
    public static FunctionDescriptor WebPIDecGetYUVA$descriptor() {
        return WebPIDecGetYUVA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint8_t *WebPIDecGetYUVA(const WebPIDecoder *idec, int *last_y, uint8_t **u, uint8_t **v, uint8_t **a, int *width, int *height, int *stride, int *uv_stride, int *a_stride)
     * }
     */
    public static MethodHandle WebPIDecGetYUVA$handle() {
        return WebPIDecGetYUVA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint8_t *WebPIDecGetYUVA(const WebPIDecoder *idec, int *last_y, uint8_t **u, uint8_t **v, uint8_t **a, int *width, int *height, int *stride, int *uv_stride, int *a_stride)
     * }
     */
    public static MemorySegment WebPIDecGetYUVA$address() {
        return WebPIDecGetYUVA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint8_t *WebPIDecGetYUVA(const WebPIDecoder *idec, int *last_y, uint8_t **u, uint8_t **v, uint8_t **a, int *width, int *height, int *stride, int *uv_stride, int *a_stride)
     * }
     */
    public static MemorySegment WebPIDecGetYUVA(MemorySegment idec, MemorySegment last_y, MemorySegment u, MemorySegment v, MemorySegment a, MemorySegment width, MemorySegment height, MemorySegment stride, MemorySegment uv_stride, MemorySegment a_stride) {
        var mh$ = WebPIDecGetYUVA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPIDecGetYUVA", idec, last_y, u, v, a, width, height, stride, uv_stride, a_stride);
            }
            return (MemorySegment)mh$.invokeExact(idec, last_y, u, v, a, width, height, stride, uv_stride, a_stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPIDecodedArea {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("WebPIDecodedArea");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const WebPDecBuffer *WebPIDecodedArea(const WebPIDecoder *idec, int *left, int *top, int *width, int *height)
     * }
     */
    public static FunctionDescriptor WebPIDecodedArea$descriptor() {
        return WebPIDecodedArea.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const WebPDecBuffer *WebPIDecodedArea(const WebPIDecoder *idec, int *left, int *top, int *width, int *height)
     * }
     */
    public static MethodHandle WebPIDecodedArea$handle() {
        return WebPIDecodedArea.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const WebPDecBuffer *WebPIDecodedArea(const WebPIDecoder *idec, int *left, int *top, int *width, int *height)
     * }
     */
    public static MemorySegment WebPIDecodedArea$address() {
        return WebPIDecodedArea.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const WebPDecBuffer *WebPIDecodedArea(const WebPIDecoder *idec, int *left, int *top, int *width, int *height)
     * }
     */
    public static MemorySegment WebPIDecodedArea(MemorySegment idec, MemorySegment left, MemorySegment top, MemorySegment width, MemorySegment height) {
        var mh$ = WebPIDecodedArea.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPIDecodedArea", idec, left, top, width, height);
            }
            return (MemorySegment)mh$.invokeExact(idec, left, top, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPGetFeaturesInternal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_LONG_LONG,
            decode_h.C_POINTER,
            decode_h.C_INT
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("WebPGetFeaturesInternal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VP8StatusCode WebPGetFeaturesInternal(const uint8_t *, size_t, WebPBitstreamFeatures *, int)
     * }
     */
    public static FunctionDescriptor WebPGetFeaturesInternal$descriptor() {
        return WebPGetFeaturesInternal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VP8StatusCode WebPGetFeaturesInternal(const uint8_t *, size_t, WebPBitstreamFeatures *, int)
     * }
     */
    public static MethodHandle WebPGetFeaturesInternal$handle() {
        return WebPGetFeaturesInternal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VP8StatusCode WebPGetFeaturesInternal(const uint8_t *, size_t, WebPBitstreamFeatures *, int)
     * }
     */
    public static MemorySegment WebPGetFeaturesInternal$address() {
        return WebPGetFeaturesInternal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VP8StatusCode WebPGetFeaturesInternal(const uint8_t *, size_t, WebPBitstreamFeatures *, int)
     * }
     */
    public static int WebPGetFeaturesInternal(MemorySegment x0, long x1, MemorySegment x2, int x3) {
        var mh$ = WebPGetFeaturesInternal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPGetFeaturesInternal", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPInitDecoderConfigInternal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_INT
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("WebPInitDecoderConfigInternal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPInitDecoderConfigInternal(WebPDecoderConfig *, int)
     * }
     */
    public static FunctionDescriptor WebPInitDecoderConfigInternal$descriptor() {
        return WebPInitDecoderConfigInternal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPInitDecoderConfigInternal(WebPDecoderConfig *, int)
     * }
     */
    public static MethodHandle WebPInitDecoderConfigInternal$handle() {
        return WebPInitDecoderConfigInternal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPInitDecoderConfigInternal(WebPDecoderConfig *, int)
     * }
     */
    public static MemorySegment WebPInitDecoderConfigInternal$address() {
        return WebPInitDecoderConfigInternal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPInitDecoderConfigInternal(WebPDecoderConfig *, int)
     * }
     */
    public static int WebPInitDecoderConfigInternal(MemorySegment x0, int x1) {
        var mh$ = WebPInitDecoderConfigInternal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPInitDecoderConfigInternal", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPIDecode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_POINTER,
            decode_h.C_POINTER,
            decode_h.C_LONG_LONG,
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("WebPIDecode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern WebPIDecoder *WebPIDecode(const uint8_t *data, size_t data_size, WebPDecoderConfig *config)
     * }
     */
    public static FunctionDescriptor WebPIDecode$descriptor() {
        return WebPIDecode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern WebPIDecoder *WebPIDecode(const uint8_t *data, size_t data_size, WebPDecoderConfig *config)
     * }
     */
    public static MethodHandle WebPIDecode$handle() {
        return WebPIDecode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern WebPIDecoder *WebPIDecode(const uint8_t *data, size_t data_size, WebPDecoderConfig *config)
     * }
     */
    public static MemorySegment WebPIDecode$address() {
        return WebPIDecode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern WebPIDecoder *WebPIDecode(const uint8_t *data, size_t data_size, WebPDecoderConfig *config)
     * }
     */
    public static MemorySegment WebPIDecode(MemorySegment data, long data_size, MemorySegment config) {
        var mh$ = WebPIDecode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPIDecode", data, data_size, config);
            }
            return (MemorySegment)mh$.invokeExact(data, data_size, config);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPDecode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            decode_h.C_INT,
            decode_h.C_POINTER,
            decode_h.C_LONG_LONG,
            decode_h.C_POINTER
        );

        public static final MemorySegment ADDR = decode_h.findOrThrow("WebPDecode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VP8StatusCode WebPDecode(const uint8_t *data, size_t data_size, WebPDecoderConfig *config)
     * }
     */
    public static FunctionDescriptor WebPDecode$descriptor() {
        return WebPDecode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VP8StatusCode WebPDecode(const uint8_t *data, size_t data_size, WebPDecoderConfig *config)
     * }
     */
    public static MethodHandle WebPDecode$handle() {
        return WebPDecode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VP8StatusCode WebPDecode(const uint8_t *data, size_t data_size, WebPDecoderConfig *config)
     * }
     */
    public static MemorySegment WebPDecode$address() {
        return WebPDecode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VP8StatusCode WebPDecode(const uint8_t *data, size_t data_size, WebPDecoderConfig *config)
     * }
     */
    public static int WebPDecode(MemorySegment data, long data_size, MemorySegment config) {
        var mh$ = WebPDecode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPDecode", data, data_size, config);
            }
            return (int)mh$.invokeExact(data, data_size, config);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }
}

