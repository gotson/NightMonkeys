// Generated by jextract

package com.github.gotson.nightmonkeys.webp.lib.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct WebPIterator {
 *     int frame_num;
 *     int num_frames;
 *     int x_offset;
 *     int y_offset;
 *     int width;
 *     int height;
 *     int duration;
 *     WebPMuxAnimDispose dispose_method;
 *     int complete;
 *     WebPData fragment;
 *     int has_alpha;
 *     WebPMuxAnimBlend blend_method;
 *     uint32_t pad[2];
 *     void *private_;
 * }
 * }
 */
public class WebPIterator {

    WebPIterator() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        demux_h.C_INT.withName("frame_num"),
        demux_h.C_INT.withName("num_frames"),
        demux_h.C_INT.withName("x_offset"),
        demux_h.C_INT.withName("y_offset"),
        demux_h.C_INT.withName("width"),
        demux_h.C_INT.withName("height"),
        demux_h.C_INT.withName("duration"),
        demux_h.C_INT.withName("dispose_method"),
        demux_h.C_INT.withName("complete"),
        MemoryLayout.paddingLayout(4),
        WebPData.layout().withName("fragment"),
        demux_h.C_INT.withName("has_alpha"),
        demux_h.C_INT.withName("blend_method"),
        MemoryLayout.sequenceLayout(2, demux_h.C_INT).withName("pad"),
        demux_h.C_POINTER.withName("private_")
    ).withName("WebPIterator");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt frame_num$LAYOUT = (OfInt)$LAYOUT.select(groupElement("frame_num"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int frame_num
     * }
     */
    public static final OfInt frame_num$layout() {
        return frame_num$LAYOUT;
    }

    private static final long frame_num$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int frame_num
     * }
     */
    public static final long frame_num$offset() {
        return frame_num$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int frame_num
     * }
     */
    public static int frame_num(MemorySegment struct) {
        return struct.get(frame_num$LAYOUT, frame_num$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int frame_num
     * }
     */
    public static void frame_num(MemorySegment struct, int fieldValue) {
        struct.set(frame_num$LAYOUT, frame_num$OFFSET, fieldValue);
    }

    private static final OfInt num_frames$LAYOUT = (OfInt)$LAYOUT.select(groupElement("num_frames"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int num_frames
     * }
     */
    public static final OfInt num_frames$layout() {
        return num_frames$LAYOUT;
    }

    private static final long num_frames$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int num_frames
     * }
     */
    public static final long num_frames$offset() {
        return num_frames$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int num_frames
     * }
     */
    public static int num_frames(MemorySegment struct) {
        return struct.get(num_frames$LAYOUT, num_frames$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int num_frames
     * }
     */
    public static void num_frames(MemorySegment struct, int fieldValue) {
        struct.set(num_frames$LAYOUT, num_frames$OFFSET, fieldValue);
    }

    private static final OfInt x_offset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("x_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int x_offset
     * }
     */
    public static final OfInt x_offset$layout() {
        return x_offset$LAYOUT;
    }

    private static final long x_offset$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int x_offset
     * }
     */
    public static final long x_offset$offset() {
        return x_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int x_offset
     * }
     */
    public static int x_offset(MemorySegment struct) {
        return struct.get(x_offset$LAYOUT, x_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int x_offset
     * }
     */
    public static void x_offset(MemorySegment struct, int fieldValue) {
        struct.set(x_offset$LAYOUT, x_offset$OFFSET, fieldValue);
    }

    private static final OfInt y_offset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("y_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int y_offset
     * }
     */
    public static final OfInt y_offset$layout() {
        return y_offset$LAYOUT;
    }

    private static final long y_offset$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int y_offset
     * }
     */
    public static final long y_offset$offset() {
        return y_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int y_offset
     * }
     */
    public static int y_offset(MemorySegment struct) {
        return struct.get(y_offset$LAYOUT, y_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int y_offset
     * }
     */
    public static void y_offset(MemorySegment struct, int fieldValue) {
        struct.set(y_offset$LAYOUT, y_offset$OFFSET, fieldValue);
    }

    private static final OfInt width$LAYOUT = (OfInt)$LAYOUT.select(groupElement("width"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int width
     * }
     */
    public static final OfInt width$layout() {
        return width$LAYOUT;
    }

    private static final long width$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int width
     * }
     */
    public static final long width$offset() {
        return width$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int width
     * }
     */
    public static int width(MemorySegment struct) {
        return struct.get(width$LAYOUT, width$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int width
     * }
     */
    public static void width(MemorySegment struct, int fieldValue) {
        struct.set(width$LAYOUT, width$OFFSET, fieldValue);
    }

    private static final OfInt height$LAYOUT = (OfInt)$LAYOUT.select(groupElement("height"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int height
     * }
     */
    public static final OfInt height$layout() {
        return height$LAYOUT;
    }

    private static final long height$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int height
     * }
     */
    public static final long height$offset() {
        return height$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int height
     * }
     */
    public static int height(MemorySegment struct) {
        return struct.get(height$LAYOUT, height$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int height
     * }
     */
    public static void height(MemorySegment struct, int fieldValue) {
        struct.set(height$LAYOUT, height$OFFSET, fieldValue);
    }

    private static final OfInt duration$LAYOUT = (OfInt)$LAYOUT.select(groupElement("duration"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int duration
     * }
     */
    public static final OfInt duration$layout() {
        return duration$LAYOUT;
    }

    private static final long duration$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int duration
     * }
     */
    public static final long duration$offset() {
        return duration$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int duration
     * }
     */
    public static int duration(MemorySegment struct) {
        return struct.get(duration$LAYOUT, duration$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int duration
     * }
     */
    public static void duration(MemorySegment struct, int fieldValue) {
        struct.set(duration$LAYOUT, duration$OFFSET, fieldValue);
    }

    private static final OfInt dispose_method$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dispose_method"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WebPMuxAnimDispose dispose_method
     * }
     */
    public static final OfInt dispose_method$layout() {
        return dispose_method$LAYOUT;
    }

    private static final long dispose_method$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WebPMuxAnimDispose dispose_method
     * }
     */
    public static final long dispose_method$offset() {
        return dispose_method$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WebPMuxAnimDispose dispose_method
     * }
     */
    public static int dispose_method(MemorySegment struct) {
        return struct.get(dispose_method$LAYOUT, dispose_method$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WebPMuxAnimDispose dispose_method
     * }
     */
    public static void dispose_method(MemorySegment struct, int fieldValue) {
        struct.set(dispose_method$LAYOUT, dispose_method$OFFSET, fieldValue);
    }

    private static final OfInt complete$LAYOUT = (OfInt)$LAYOUT.select(groupElement("complete"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int complete
     * }
     */
    public static final OfInt complete$layout() {
        return complete$LAYOUT;
    }

    private static final long complete$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int complete
     * }
     */
    public static final long complete$offset() {
        return complete$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int complete
     * }
     */
    public static int complete(MemorySegment struct) {
        return struct.get(complete$LAYOUT, complete$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int complete
     * }
     */
    public static void complete(MemorySegment struct, int fieldValue) {
        struct.set(complete$LAYOUT, complete$OFFSET, fieldValue);
    }

    private static final GroupLayout fragment$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("fragment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WebPData fragment
     * }
     */
    public static final GroupLayout fragment$layout() {
        return fragment$LAYOUT;
    }

    private static final long fragment$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WebPData fragment
     * }
     */
    public static final long fragment$offset() {
        return fragment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WebPData fragment
     * }
     */
    public static MemorySegment fragment(MemorySegment struct) {
        return struct.asSlice(fragment$OFFSET, fragment$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WebPData fragment
     * }
     */
    public static void fragment(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, fragment$OFFSET, fragment$LAYOUT.byteSize());
    }

    private static final OfInt has_alpha$LAYOUT = (OfInt)$LAYOUT.select(groupElement("has_alpha"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int has_alpha
     * }
     */
    public static final OfInt has_alpha$layout() {
        return has_alpha$LAYOUT;
    }

    private static final long has_alpha$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int has_alpha
     * }
     */
    public static final long has_alpha$offset() {
        return has_alpha$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int has_alpha
     * }
     */
    public static int has_alpha(MemorySegment struct) {
        return struct.get(has_alpha$LAYOUT, has_alpha$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int has_alpha
     * }
     */
    public static void has_alpha(MemorySegment struct, int fieldValue) {
        struct.set(has_alpha$LAYOUT, has_alpha$OFFSET, fieldValue);
    }

    private static final OfInt blend_method$LAYOUT = (OfInt)$LAYOUT.select(groupElement("blend_method"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WebPMuxAnimBlend blend_method
     * }
     */
    public static final OfInt blend_method$layout() {
        return blend_method$LAYOUT;
    }

    private static final long blend_method$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WebPMuxAnimBlend blend_method
     * }
     */
    public static final long blend_method$offset() {
        return blend_method$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WebPMuxAnimBlend blend_method
     * }
     */
    public static int blend_method(MemorySegment struct) {
        return struct.get(blend_method$LAYOUT, blend_method$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WebPMuxAnimBlend blend_method
     * }
     */
    public static void blend_method(MemorySegment struct, int fieldValue) {
        struct.set(blend_method$LAYOUT, blend_method$OFFSET, fieldValue);
    }

    private static final SequenceLayout pad$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("pad"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t pad[2]
     * }
     */
    public static final SequenceLayout pad$layout() {
        return pad$LAYOUT;
    }

    private static final long pad$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t pad[2]
     * }
     */
    public static final long pad$offset() {
        return pad$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t pad[2]
     * }
     */
    public static MemorySegment pad(MemorySegment struct) {
        return struct.asSlice(pad$OFFSET, pad$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t pad[2]
     * }
     */
    public static void pad(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pad$OFFSET, pad$LAYOUT.byteSize());
    }

    private static long[] pad$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t pad[2]
     * }
     */
    public static long[] pad$dimensions() {
        return pad$DIMS;
    }
    private static final VarHandle pad$ELEM_HANDLE = pad$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t pad[2]
     * }
     */
    public static int pad(MemorySegment struct, long index0) {
        return (int)pad$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t pad[2]
     * }
     */
    public static void pad(MemorySegment struct, long index0, int fieldValue) {
        pad$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final AddressLayout private_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("private_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *private_
     * }
     */
    public static final AddressLayout private_$layout() {
        return private_$LAYOUT;
    }

    private static final long private_$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *private_
     * }
     */
    public static final long private_$offset() {
        return private_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *private_
     * }
     */
    public static MemorySegment private_(MemorySegment struct) {
        return struct.get(private_$LAYOUT, private_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *private_
     * }
     */
    public static void private_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(private_$LAYOUT, private_$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

