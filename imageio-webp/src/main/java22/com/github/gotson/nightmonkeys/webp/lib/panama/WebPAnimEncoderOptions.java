// Generated by jextract

package com.github.gotson.nightmonkeys.webp.lib.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct WebPAnimEncoderOptions {
 *     WebPMuxAnimParams anim_params;
 *     int minimize_size;
 *     int kmin;
 *     int kmax;
 *     int allow_mixed;
 *     int verbose;
 *     uint32_t padding[4];
 * }
 * }
 */
public class WebPAnimEncoderOptions {

    WebPAnimEncoderOptions() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        WebPMuxAnimParams.layout().withName("anim_params"),
        mux_h.C_INT.withName("minimize_size"),
        mux_h.C_INT.withName("kmin"),
        mux_h.C_INT.withName("kmax"),
        mux_h.C_INT.withName("allow_mixed"),
        mux_h.C_INT.withName("verbose"),
        MemoryLayout.sequenceLayout(4, mux_h.C_INT).withName("padding")
    ).withName("WebPAnimEncoderOptions");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout anim_params$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("anim_params"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WebPMuxAnimParams anim_params
     * }
     */
    public static final GroupLayout anim_params$layout() {
        return anim_params$LAYOUT;
    }

    private static final long anim_params$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WebPMuxAnimParams anim_params
     * }
     */
    public static final long anim_params$offset() {
        return anim_params$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WebPMuxAnimParams anim_params
     * }
     */
    public static MemorySegment anim_params(MemorySegment struct) {
        return struct.asSlice(anim_params$OFFSET, anim_params$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WebPMuxAnimParams anim_params
     * }
     */
    public static void anim_params(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, anim_params$OFFSET, anim_params$LAYOUT.byteSize());
    }

    private static final OfInt minimize_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("minimize_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int minimize_size
     * }
     */
    public static final OfInt minimize_size$layout() {
        return minimize_size$LAYOUT;
    }

    private static final long minimize_size$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int minimize_size
     * }
     */
    public static final long minimize_size$offset() {
        return minimize_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int minimize_size
     * }
     */
    public static int minimize_size(MemorySegment struct) {
        return struct.get(minimize_size$LAYOUT, minimize_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int minimize_size
     * }
     */
    public static void minimize_size(MemorySegment struct, int fieldValue) {
        struct.set(minimize_size$LAYOUT, minimize_size$OFFSET, fieldValue);
    }

    private static final OfInt kmin$LAYOUT = (OfInt)$LAYOUT.select(groupElement("kmin"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int kmin
     * }
     */
    public static final OfInt kmin$layout() {
        return kmin$LAYOUT;
    }

    private static final long kmin$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int kmin
     * }
     */
    public static final long kmin$offset() {
        return kmin$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int kmin
     * }
     */
    public static int kmin(MemorySegment struct) {
        return struct.get(kmin$LAYOUT, kmin$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int kmin
     * }
     */
    public static void kmin(MemorySegment struct, int fieldValue) {
        struct.set(kmin$LAYOUT, kmin$OFFSET, fieldValue);
    }

    private static final OfInt kmax$LAYOUT = (OfInt)$LAYOUT.select(groupElement("kmax"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int kmax
     * }
     */
    public static final OfInt kmax$layout() {
        return kmax$LAYOUT;
    }

    private static final long kmax$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int kmax
     * }
     */
    public static final long kmax$offset() {
        return kmax$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int kmax
     * }
     */
    public static int kmax(MemorySegment struct) {
        return struct.get(kmax$LAYOUT, kmax$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int kmax
     * }
     */
    public static void kmax(MemorySegment struct, int fieldValue) {
        struct.set(kmax$LAYOUT, kmax$OFFSET, fieldValue);
    }

    private static final OfInt allow_mixed$LAYOUT = (OfInt)$LAYOUT.select(groupElement("allow_mixed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int allow_mixed
     * }
     */
    public static final OfInt allow_mixed$layout() {
        return allow_mixed$LAYOUT;
    }

    private static final long allow_mixed$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int allow_mixed
     * }
     */
    public static final long allow_mixed$offset() {
        return allow_mixed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int allow_mixed
     * }
     */
    public static int allow_mixed(MemorySegment struct) {
        return struct.get(allow_mixed$LAYOUT, allow_mixed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int allow_mixed
     * }
     */
    public static void allow_mixed(MemorySegment struct, int fieldValue) {
        struct.set(allow_mixed$LAYOUT, allow_mixed$OFFSET, fieldValue);
    }

    private static final OfInt verbose$LAYOUT = (OfInt)$LAYOUT.select(groupElement("verbose"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int verbose
     * }
     */
    public static final OfInt verbose$layout() {
        return verbose$LAYOUT;
    }

    private static final long verbose$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int verbose
     * }
     */
    public static final long verbose$offset() {
        return verbose$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int verbose
     * }
     */
    public static int verbose(MemorySegment struct) {
        return struct.get(verbose$LAYOUT, verbose$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int verbose
     * }
     */
    public static void verbose(MemorySegment struct, int fieldValue) {
        struct.set(verbose$LAYOUT, verbose$OFFSET, fieldValue);
    }

    private static final SequenceLayout padding$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("padding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t padding[4]
     * }
     */
    public static final SequenceLayout padding$layout() {
        return padding$LAYOUT;
    }

    private static final long padding$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t padding[4]
     * }
     */
    public static final long padding$offset() {
        return padding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t padding[4]
     * }
     */
    public static MemorySegment padding(MemorySegment struct) {
        return struct.asSlice(padding$OFFSET, padding$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t padding[4]
     * }
     */
    public static void padding(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, padding$OFFSET, padding$LAYOUT.byteSize());
    }

    private static long[] padding$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t padding[4]
     * }
     */
    public static long[] padding$dimensions() {
        return padding$DIMS;
    }
    private static final VarHandle padding$ELEM_HANDLE = padding$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t padding[4]
     * }
     */
    public static int padding(MemorySegment struct, long index0) {
        return (int)padding$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t padding[4]
     * }
     */
    public static void padding(MemorySegment struct, long index0, int fieldValue) {
        padding$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

