// Generated by jextract

package com.github.gotson.nightmonkeys.webp.lib.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct WebPMuxFrameInfo {
 *     WebPData bitstream;
 *     int x_offset;
 *     int y_offset;
 *     int duration;
 *     WebPChunkId id;
 *     WebPMuxAnimDispose dispose_method;
 *     WebPMuxAnimBlend blend_method;
 *     uint32_t pad[1];
 * }
 * }
 */
public class WebPMuxFrameInfo {

    WebPMuxFrameInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        WebPData.layout().withName("bitstream"),
        mux_h.C_INT.withName("x_offset"),
        mux_h.C_INT.withName("y_offset"),
        mux_h.C_INT.withName("duration"),
        mux_h.C_INT.withName("id"),
        mux_h.C_INT.withName("dispose_method"),
        mux_h.C_INT.withName("blend_method"),
        MemoryLayout.sequenceLayout(1, mux_h.C_INT).withName("pad"),
        MemoryLayout.paddingLayout(4)
    ).withName("WebPMuxFrameInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout bitstream$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("bitstream"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WebPData bitstream
     * }
     */
    public static final GroupLayout bitstream$layout() {
        return bitstream$LAYOUT;
    }

    private static final long bitstream$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WebPData bitstream
     * }
     */
    public static final long bitstream$offset() {
        return bitstream$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WebPData bitstream
     * }
     */
    public static MemorySegment bitstream(MemorySegment struct) {
        return struct.asSlice(bitstream$OFFSET, bitstream$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WebPData bitstream
     * }
     */
    public static void bitstream(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, bitstream$OFFSET, bitstream$LAYOUT.byteSize());
    }

    private static final OfInt x_offset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("x_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int x_offset
     * }
     */
    public static final OfInt x_offset$layout() {
        return x_offset$LAYOUT;
    }

    private static final long x_offset$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int x_offset
     * }
     */
    public static final long x_offset$offset() {
        return x_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int x_offset
     * }
     */
    public static int x_offset(MemorySegment struct) {
        return struct.get(x_offset$LAYOUT, x_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int x_offset
     * }
     */
    public static void x_offset(MemorySegment struct, int fieldValue) {
        struct.set(x_offset$LAYOUT, x_offset$OFFSET, fieldValue);
    }

    private static final OfInt y_offset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("y_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int y_offset
     * }
     */
    public static final OfInt y_offset$layout() {
        return y_offset$LAYOUT;
    }

    private static final long y_offset$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int y_offset
     * }
     */
    public static final long y_offset$offset() {
        return y_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int y_offset
     * }
     */
    public static int y_offset(MemorySegment struct) {
        return struct.get(y_offset$LAYOUT, y_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int y_offset
     * }
     */
    public static void y_offset(MemorySegment struct, int fieldValue) {
        struct.set(y_offset$LAYOUT, y_offset$OFFSET, fieldValue);
    }

    private static final OfInt duration$LAYOUT = (OfInt)$LAYOUT.select(groupElement("duration"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int duration
     * }
     */
    public static final OfInt duration$layout() {
        return duration$LAYOUT;
    }

    private static final long duration$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int duration
     * }
     */
    public static final long duration$offset() {
        return duration$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int duration
     * }
     */
    public static int duration(MemorySegment struct) {
        return struct.get(duration$LAYOUT, duration$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int duration
     * }
     */
    public static void duration(MemorySegment struct, int fieldValue) {
        struct.set(duration$LAYOUT, duration$OFFSET, fieldValue);
    }

    private static final OfInt id$LAYOUT = (OfInt)$LAYOUT.select(groupElement("id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WebPChunkId id
     * }
     */
    public static final OfInt id$layout() {
        return id$LAYOUT;
    }

    private static final long id$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WebPChunkId id
     * }
     */
    public static final long id$offset() {
        return id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WebPChunkId id
     * }
     */
    public static int id(MemorySegment struct) {
        return struct.get(id$LAYOUT, id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WebPChunkId id
     * }
     */
    public static void id(MemorySegment struct, int fieldValue) {
        struct.set(id$LAYOUT, id$OFFSET, fieldValue);
    }

    private static final OfInt dispose_method$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dispose_method"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WebPMuxAnimDispose dispose_method
     * }
     */
    public static final OfInt dispose_method$layout() {
        return dispose_method$LAYOUT;
    }

    private static final long dispose_method$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WebPMuxAnimDispose dispose_method
     * }
     */
    public static final long dispose_method$offset() {
        return dispose_method$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WebPMuxAnimDispose dispose_method
     * }
     */
    public static int dispose_method(MemorySegment struct) {
        return struct.get(dispose_method$LAYOUT, dispose_method$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WebPMuxAnimDispose dispose_method
     * }
     */
    public static void dispose_method(MemorySegment struct, int fieldValue) {
        struct.set(dispose_method$LAYOUT, dispose_method$OFFSET, fieldValue);
    }

    private static final OfInt blend_method$LAYOUT = (OfInt)$LAYOUT.select(groupElement("blend_method"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WebPMuxAnimBlend blend_method
     * }
     */
    public static final OfInt blend_method$layout() {
        return blend_method$LAYOUT;
    }

    private static final long blend_method$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WebPMuxAnimBlend blend_method
     * }
     */
    public static final long blend_method$offset() {
        return blend_method$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WebPMuxAnimBlend blend_method
     * }
     */
    public static int blend_method(MemorySegment struct) {
        return struct.get(blend_method$LAYOUT, blend_method$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WebPMuxAnimBlend blend_method
     * }
     */
    public static void blend_method(MemorySegment struct, int fieldValue) {
        struct.set(blend_method$LAYOUT, blend_method$OFFSET, fieldValue);
    }

    private static final SequenceLayout pad$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("pad"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t pad[1]
     * }
     */
    public static final SequenceLayout pad$layout() {
        return pad$LAYOUT;
    }

    private static final long pad$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t pad[1]
     * }
     */
    public static final long pad$offset() {
        return pad$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t pad[1]
     * }
     */
    public static MemorySegment pad(MemorySegment struct) {
        return struct.asSlice(pad$OFFSET, pad$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t pad[1]
     * }
     */
    public static void pad(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pad$OFFSET, pad$LAYOUT.byteSize());
    }

    private static long[] pad$DIMS = { 1 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t pad[1]
     * }
     */
    public static long[] pad$dimensions() {
        return pad$DIMS;
    }
    private static final VarHandle pad$ELEM_HANDLE = pad$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t pad[1]
     * }
     */
    public static int pad(MemorySegment struct, long index0) {
        return (int)pad$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t pad[1]
     * }
     */
    public static void pad(MemorySegment struct, long index0, int fieldValue) {
        pad$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

