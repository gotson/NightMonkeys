// Generated by jextract

package com.github.gotson.nightmonkeys.webp.lib.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct WebPConfig {
 *     int lossless;
 *     float quality;
 *     int method;
 *     WebPImageHint image_hint;
 *     int target_size;
 *     float target_PSNR;
 *     int segments;
 *     int sns_strength;
 *     int filter_strength;
 *     int filter_sharpness;
 *     int filter_type;
 *     int autofilter;
 *     int alpha_compression;
 *     int alpha_filtering;
 *     int alpha_quality;
 *     int pass;
 *     int show_compressed;
 *     int preprocessing;
 *     int partitions;
 *     int partition_limit;
 *     int emulate_jpeg_size;
 *     int thread_level;
 *     int low_memory;
 *     int near_lossless;
 *     int exact;
 *     int use_delta_palette;
 *     int use_sharp_yuv;
 *     int qmin;
 *     int qmax;
 * }
 * }
 */
public class WebPConfig {

    WebPConfig() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        encode_h.C_INT.withName("lossless"),
        encode_h.C_FLOAT.withName("quality"),
        encode_h.C_INT.withName("method"),
        encode_h.C_INT.withName("image_hint"),
        encode_h.C_INT.withName("target_size"),
        encode_h.C_FLOAT.withName("target_PSNR"),
        encode_h.C_INT.withName("segments"),
        encode_h.C_INT.withName("sns_strength"),
        encode_h.C_INT.withName("filter_strength"),
        encode_h.C_INT.withName("filter_sharpness"),
        encode_h.C_INT.withName("filter_type"),
        encode_h.C_INT.withName("autofilter"),
        encode_h.C_INT.withName("alpha_compression"),
        encode_h.C_INT.withName("alpha_filtering"),
        encode_h.C_INT.withName("alpha_quality"),
        encode_h.C_INT.withName("pass"),
        encode_h.C_INT.withName("show_compressed"),
        encode_h.C_INT.withName("preprocessing"),
        encode_h.C_INT.withName("partitions"),
        encode_h.C_INT.withName("partition_limit"),
        encode_h.C_INT.withName("emulate_jpeg_size"),
        encode_h.C_INT.withName("thread_level"),
        encode_h.C_INT.withName("low_memory"),
        encode_h.C_INT.withName("near_lossless"),
        encode_h.C_INT.withName("exact"),
        encode_h.C_INT.withName("use_delta_palette"),
        encode_h.C_INT.withName("use_sharp_yuv"),
        encode_h.C_INT.withName("qmin"),
        encode_h.C_INT.withName("qmax")
    ).withName("WebPConfig");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt lossless$LAYOUT = (OfInt)$LAYOUT.select(groupElement("lossless"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int lossless
     * }
     */
    public static final OfInt lossless$layout() {
        return lossless$LAYOUT;
    }

    private static final long lossless$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int lossless
     * }
     */
    public static final long lossless$offset() {
        return lossless$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int lossless
     * }
     */
    public static int lossless(MemorySegment struct) {
        return struct.get(lossless$LAYOUT, lossless$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int lossless
     * }
     */
    public static void lossless(MemorySegment struct, int fieldValue) {
        struct.set(lossless$LAYOUT, lossless$OFFSET, fieldValue);
    }

    private static final OfFloat quality$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("quality"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float quality
     * }
     */
    public static final OfFloat quality$layout() {
        return quality$LAYOUT;
    }

    private static final long quality$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float quality
     * }
     */
    public static final long quality$offset() {
        return quality$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float quality
     * }
     */
    public static float quality(MemorySegment struct) {
        return struct.get(quality$LAYOUT, quality$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float quality
     * }
     */
    public static void quality(MemorySegment struct, float fieldValue) {
        struct.set(quality$LAYOUT, quality$OFFSET, fieldValue);
    }

    private static final OfInt method$LAYOUT = (OfInt)$LAYOUT.select(groupElement("method"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int method
     * }
     */
    public static final OfInt method$layout() {
        return method$LAYOUT;
    }

    private static final long method$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int method
     * }
     */
    public static final long method$offset() {
        return method$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int method
     * }
     */
    public static int method(MemorySegment struct) {
        return struct.get(method$LAYOUT, method$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int method
     * }
     */
    public static void method(MemorySegment struct, int fieldValue) {
        struct.set(method$LAYOUT, method$OFFSET, fieldValue);
    }

    private static final OfInt image_hint$LAYOUT = (OfInt)$LAYOUT.select(groupElement("image_hint"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WebPImageHint image_hint
     * }
     */
    public static final OfInt image_hint$layout() {
        return image_hint$LAYOUT;
    }

    private static final long image_hint$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WebPImageHint image_hint
     * }
     */
    public static final long image_hint$offset() {
        return image_hint$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WebPImageHint image_hint
     * }
     */
    public static int image_hint(MemorySegment struct) {
        return struct.get(image_hint$LAYOUT, image_hint$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WebPImageHint image_hint
     * }
     */
    public static void image_hint(MemorySegment struct, int fieldValue) {
        struct.set(image_hint$LAYOUT, image_hint$OFFSET, fieldValue);
    }

    private static final OfInt target_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("target_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int target_size
     * }
     */
    public static final OfInt target_size$layout() {
        return target_size$LAYOUT;
    }

    private static final long target_size$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int target_size
     * }
     */
    public static final long target_size$offset() {
        return target_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int target_size
     * }
     */
    public static int target_size(MemorySegment struct) {
        return struct.get(target_size$LAYOUT, target_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int target_size
     * }
     */
    public static void target_size(MemorySegment struct, int fieldValue) {
        struct.set(target_size$LAYOUT, target_size$OFFSET, fieldValue);
    }

    private static final OfFloat target_PSNR$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("target_PSNR"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float target_PSNR
     * }
     */
    public static final OfFloat target_PSNR$layout() {
        return target_PSNR$LAYOUT;
    }

    private static final long target_PSNR$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float target_PSNR
     * }
     */
    public static final long target_PSNR$offset() {
        return target_PSNR$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float target_PSNR
     * }
     */
    public static float target_PSNR(MemorySegment struct) {
        return struct.get(target_PSNR$LAYOUT, target_PSNR$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float target_PSNR
     * }
     */
    public static void target_PSNR(MemorySegment struct, float fieldValue) {
        struct.set(target_PSNR$LAYOUT, target_PSNR$OFFSET, fieldValue);
    }

    private static final OfInt segments$LAYOUT = (OfInt)$LAYOUT.select(groupElement("segments"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int segments
     * }
     */
    public static final OfInt segments$layout() {
        return segments$LAYOUT;
    }

    private static final long segments$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int segments
     * }
     */
    public static final long segments$offset() {
        return segments$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int segments
     * }
     */
    public static int segments(MemorySegment struct) {
        return struct.get(segments$LAYOUT, segments$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int segments
     * }
     */
    public static void segments(MemorySegment struct, int fieldValue) {
        struct.set(segments$LAYOUT, segments$OFFSET, fieldValue);
    }

    private static final OfInt sns_strength$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sns_strength"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int sns_strength
     * }
     */
    public static final OfInt sns_strength$layout() {
        return sns_strength$LAYOUT;
    }

    private static final long sns_strength$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int sns_strength
     * }
     */
    public static final long sns_strength$offset() {
        return sns_strength$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int sns_strength
     * }
     */
    public static int sns_strength(MemorySegment struct) {
        return struct.get(sns_strength$LAYOUT, sns_strength$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int sns_strength
     * }
     */
    public static void sns_strength(MemorySegment struct, int fieldValue) {
        struct.set(sns_strength$LAYOUT, sns_strength$OFFSET, fieldValue);
    }

    private static final OfInt filter_strength$LAYOUT = (OfInt)$LAYOUT.select(groupElement("filter_strength"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int filter_strength
     * }
     */
    public static final OfInt filter_strength$layout() {
        return filter_strength$LAYOUT;
    }

    private static final long filter_strength$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int filter_strength
     * }
     */
    public static final long filter_strength$offset() {
        return filter_strength$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int filter_strength
     * }
     */
    public static int filter_strength(MemorySegment struct) {
        return struct.get(filter_strength$LAYOUT, filter_strength$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int filter_strength
     * }
     */
    public static void filter_strength(MemorySegment struct, int fieldValue) {
        struct.set(filter_strength$LAYOUT, filter_strength$OFFSET, fieldValue);
    }

    private static final OfInt filter_sharpness$LAYOUT = (OfInt)$LAYOUT.select(groupElement("filter_sharpness"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int filter_sharpness
     * }
     */
    public static final OfInt filter_sharpness$layout() {
        return filter_sharpness$LAYOUT;
    }

    private static final long filter_sharpness$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int filter_sharpness
     * }
     */
    public static final long filter_sharpness$offset() {
        return filter_sharpness$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int filter_sharpness
     * }
     */
    public static int filter_sharpness(MemorySegment struct) {
        return struct.get(filter_sharpness$LAYOUT, filter_sharpness$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int filter_sharpness
     * }
     */
    public static void filter_sharpness(MemorySegment struct, int fieldValue) {
        struct.set(filter_sharpness$LAYOUT, filter_sharpness$OFFSET, fieldValue);
    }

    private static final OfInt filter_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("filter_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int filter_type
     * }
     */
    public static final OfInt filter_type$layout() {
        return filter_type$LAYOUT;
    }

    private static final long filter_type$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int filter_type
     * }
     */
    public static final long filter_type$offset() {
        return filter_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int filter_type
     * }
     */
    public static int filter_type(MemorySegment struct) {
        return struct.get(filter_type$LAYOUT, filter_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int filter_type
     * }
     */
    public static void filter_type(MemorySegment struct, int fieldValue) {
        struct.set(filter_type$LAYOUT, filter_type$OFFSET, fieldValue);
    }

    private static final OfInt autofilter$LAYOUT = (OfInt)$LAYOUT.select(groupElement("autofilter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int autofilter
     * }
     */
    public static final OfInt autofilter$layout() {
        return autofilter$LAYOUT;
    }

    private static final long autofilter$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int autofilter
     * }
     */
    public static final long autofilter$offset() {
        return autofilter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int autofilter
     * }
     */
    public static int autofilter(MemorySegment struct) {
        return struct.get(autofilter$LAYOUT, autofilter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int autofilter
     * }
     */
    public static void autofilter(MemorySegment struct, int fieldValue) {
        struct.set(autofilter$LAYOUT, autofilter$OFFSET, fieldValue);
    }

    private static final OfInt alpha_compression$LAYOUT = (OfInt)$LAYOUT.select(groupElement("alpha_compression"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int alpha_compression
     * }
     */
    public static final OfInt alpha_compression$layout() {
        return alpha_compression$LAYOUT;
    }

    private static final long alpha_compression$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int alpha_compression
     * }
     */
    public static final long alpha_compression$offset() {
        return alpha_compression$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int alpha_compression
     * }
     */
    public static int alpha_compression(MemorySegment struct) {
        return struct.get(alpha_compression$LAYOUT, alpha_compression$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int alpha_compression
     * }
     */
    public static void alpha_compression(MemorySegment struct, int fieldValue) {
        struct.set(alpha_compression$LAYOUT, alpha_compression$OFFSET, fieldValue);
    }

    private static final OfInt alpha_filtering$LAYOUT = (OfInt)$LAYOUT.select(groupElement("alpha_filtering"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int alpha_filtering
     * }
     */
    public static final OfInt alpha_filtering$layout() {
        return alpha_filtering$LAYOUT;
    }

    private static final long alpha_filtering$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int alpha_filtering
     * }
     */
    public static final long alpha_filtering$offset() {
        return alpha_filtering$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int alpha_filtering
     * }
     */
    public static int alpha_filtering(MemorySegment struct) {
        return struct.get(alpha_filtering$LAYOUT, alpha_filtering$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int alpha_filtering
     * }
     */
    public static void alpha_filtering(MemorySegment struct, int fieldValue) {
        struct.set(alpha_filtering$LAYOUT, alpha_filtering$OFFSET, fieldValue);
    }

    private static final OfInt alpha_quality$LAYOUT = (OfInt)$LAYOUT.select(groupElement("alpha_quality"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int alpha_quality
     * }
     */
    public static final OfInt alpha_quality$layout() {
        return alpha_quality$LAYOUT;
    }

    private static final long alpha_quality$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int alpha_quality
     * }
     */
    public static final long alpha_quality$offset() {
        return alpha_quality$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int alpha_quality
     * }
     */
    public static int alpha_quality(MemorySegment struct) {
        return struct.get(alpha_quality$LAYOUT, alpha_quality$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int alpha_quality
     * }
     */
    public static void alpha_quality(MemorySegment struct, int fieldValue) {
        struct.set(alpha_quality$LAYOUT, alpha_quality$OFFSET, fieldValue);
    }

    private static final OfInt pass$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pass"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int pass
     * }
     */
    public static final OfInt pass$layout() {
        return pass$LAYOUT;
    }

    private static final long pass$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int pass
     * }
     */
    public static final long pass$offset() {
        return pass$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int pass
     * }
     */
    public static int pass(MemorySegment struct) {
        return struct.get(pass$LAYOUT, pass$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int pass
     * }
     */
    public static void pass(MemorySegment struct, int fieldValue) {
        struct.set(pass$LAYOUT, pass$OFFSET, fieldValue);
    }

    private static final OfInt show_compressed$LAYOUT = (OfInt)$LAYOUT.select(groupElement("show_compressed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int show_compressed
     * }
     */
    public static final OfInt show_compressed$layout() {
        return show_compressed$LAYOUT;
    }

    private static final long show_compressed$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int show_compressed
     * }
     */
    public static final long show_compressed$offset() {
        return show_compressed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int show_compressed
     * }
     */
    public static int show_compressed(MemorySegment struct) {
        return struct.get(show_compressed$LAYOUT, show_compressed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int show_compressed
     * }
     */
    public static void show_compressed(MemorySegment struct, int fieldValue) {
        struct.set(show_compressed$LAYOUT, show_compressed$OFFSET, fieldValue);
    }

    private static final OfInt preprocessing$LAYOUT = (OfInt)$LAYOUT.select(groupElement("preprocessing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int preprocessing
     * }
     */
    public static final OfInt preprocessing$layout() {
        return preprocessing$LAYOUT;
    }

    private static final long preprocessing$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int preprocessing
     * }
     */
    public static final long preprocessing$offset() {
        return preprocessing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int preprocessing
     * }
     */
    public static int preprocessing(MemorySegment struct) {
        return struct.get(preprocessing$LAYOUT, preprocessing$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int preprocessing
     * }
     */
    public static void preprocessing(MemorySegment struct, int fieldValue) {
        struct.set(preprocessing$LAYOUT, preprocessing$OFFSET, fieldValue);
    }

    private static final OfInt partitions$LAYOUT = (OfInt)$LAYOUT.select(groupElement("partitions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int partitions
     * }
     */
    public static final OfInt partitions$layout() {
        return partitions$LAYOUT;
    }

    private static final long partitions$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int partitions
     * }
     */
    public static final long partitions$offset() {
        return partitions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int partitions
     * }
     */
    public static int partitions(MemorySegment struct) {
        return struct.get(partitions$LAYOUT, partitions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int partitions
     * }
     */
    public static void partitions(MemorySegment struct, int fieldValue) {
        struct.set(partitions$LAYOUT, partitions$OFFSET, fieldValue);
    }

    private static final OfInt partition_limit$LAYOUT = (OfInt)$LAYOUT.select(groupElement("partition_limit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int partition_limit
     * }
     */
    public static final OfInt partition_limit$layout() {
        return partition_limit$LAYOUT;
    }

    private static final long partition_limit$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int partition_limit
     * }
     */
    public static final long partition_limit$offset() {
        return partition_limit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int partition_limit
     * }
     */
    public static int partition_limit(MemorySegment struct) {
        return struct.get(partition_limit$LAYOUT, partition_limit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int partition_limit
     * }
     */
    public static void partition_limit(MemorySegment struct, int fieldValue) {
        struct.set(partition_limit$LAYOUT, partition_limit$OFFSET, fieldValue);
    }

    private static final OfInt emulate_jpeg_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("emulate_jpeg_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int emulate_jpeg_size
     * }
     */
    public static final OfInt emulate_jpeg_size$layout() {
        return emulate_jpeg_size$LAYOUT;
    }

    private static final long emulate_jpeg_size$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int emulate_jpeg_size
     * }
     */
    public static final long emulate_jpeg_size$offset() {
        return emulate_jpeg_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int emulate_jpeg_size
     * }
     */
    public static int emulate_jpeg_size(MemorySegment struct) {
        return struct.get(emulate_jpeg_size$LAYOUT, emulate_jpeg_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int emulate_jpeg_size
     * }
     */
    public static void emulate_jpeg_size(MemorySegment struct, int fieldValue) {
        struct.set(emulate_jpeg_size$LAYOUT, emulate_jpeg_size$OFFSET, fieldValue);
    }

    private static final OfInt thread_level$LAYOUT = (OfInt)$LAYOUT.select(groupElement("thread_level"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int thread_level
     * }
     */
    public static final OfInt thread_level$layout() {
        return thread_level$LAYOUT;
    }

    private static final long thread_level$OFFSET = 84;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int thread_level
     * }
     */
    public static final long thread_level$offset() {
        return thread_level$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int thread_level
     * }
     */
    public static int thread_level(MemorySegment struct) {
        return struct.get(thread_level$LAYOUT, thread_level$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int thread_level
     * }
     */
    public static void thread_level(MemorySegment struct, int fieldValue) {
        struct.set(thread_level$LAYOUT, thread_level$OFFSET, fieldValue);
    }

    private static final OfInt low_memory$LAYOUT = (OfInt)$LAYOUT.select(groupElement("low_memory"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int low_memory
     * }
     */
    public static final OfInt low_memory$layout() {
        return low_memory$LAYOUT;
    }

    private static final long low_memory$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int low_memory
     * }
     */
    public static final long low_memory$offset() {
        return low_memory$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int low_memory
     * }
     */
    public static int low_memory(MemorySegment struct) {
        return struct.get(low_memory$LAYOUT, low_memory$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int low_memory
     * }
     */
    public static void low_memory(MemorySegment struct, int fieldValue) {
        struct.set(low_memory$LAYOUT, low_memory$OFFSET, fieldValue);
    }

    private static final OfInt near_lossless$LAYOUT = (OfInt)$LAYOUT.select(groupElement("near_lossless"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int near_lossless
     * }
     */
    public static final OfInt near_lossless$layout() {
        return near_lossless$LAYOUT;
    }

    private static final long near_lossless$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int near_lossless
     * }
     */
    public static final long near_lossless$offset() {
        return near_lossless$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int near_lossless
     * }
     */
    public static int near_lossless(MemorySegment struct) {
        return struct.get(near_lossless$LAYOUT, near_lossless$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int near_lossless
     * }
     */
    public static void near_lossless(MemorySegment struct, int fieldValue) {
        struct.set(near_lossless$LAYOUT, near_lossless$OFFSET, fieldValue);
    }

    private static final OfInt exact$LAYOUT = (OfInt)$LAYOUT.select(groupElement("exact"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int exact
     * }
     */
    public static final OfInt exact$layout() {
        return exact$LAYOUT;
    }

    private static final long exact$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int exact
     * }
     */
    public static final long exact$offset() {
        return exact$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int exact
     * }
     */
    public static int exact(MemorySegment struct) {
        return struct.get(exact$LAYOUT, exact$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int exact
     * }
     */
    public static void exact(MemorySegment struct, int fieldValue) {
        struct.set(exact$LAYOUT, exact$OFFSET, fieldValue);
    }

    private static final OfInt use_delta_palette$LAYOUT = (OfInt)$LAYOUT.select(groupElement("use_delta_palette"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int use_delta_palette
     * }
     */
    public static final OfInt use_delta_palette$layout() {
        return use_delta_palette$LAYOUT;
    }

    private static final long use_delta_palette$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int use_delta_palette
     * }
     */
    public static final long use_delta_palette$offset() {
        return use_delta_palette$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int use_delta_palette
     * }
     */
    public static int use_delta_palette(MemorySegment struct) {
        return struct.get(use_delta_palette$LAYOUT, use_delta_palette$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int use_delta_palette
     * }
     */
    public static void use_delta_palette(MemorySegment struct, int fieldValue) {
        struct.set(use_delta_palette$LAYOUT, use_delta_palette$OFFSET, fieldValue);
    }

    private static final OfInt use_sharp_yuv$LAYOUT = (OfInt)$LAYOUT.select(groupElement("use_sharp_yuv"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int use_sharp_yuv
     * }
     */
    public static final OfInt use_sharp_yuv$layout() {
        return use_sharp_yuv$LAYOUT;
    }

    private static final long use_sharp_yuv$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int use_sharp_yuv
     * }
     */
    public static final long use_sharp_yuv$offset() {
        return use_sharp_yuv$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int use_sharp_yuv
     * }
     */
    public static int use_sharp_yuv(MemorySegment struct) {
        return struct.get(use_sharp_yuv$LAYOUT, use_sharp_yuv$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int use_sharp_yuv
     * }
     */
    public static void use_sharp_yuv(MemorySegment struct, int fieldValue) {
        struct.set(use_sharp_yuv$LAYOUT, use_sharp_yuv$OFFSET, fieldValue);
    }

    private static final OfInt qmin$LAYOUT = (OfInt)$LAYOUT.select(groupElement("qmin"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int qmin
     * }
     */
    public static final OfInt qmin$layout() {
        return qmin$LAYOUT;
    }

    private static final long qmin$OFFSET = 108;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int qmin
     * }
     */
    public static final long qmin$offset() {
        return qmin$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int qmin
     * }
     */
    public static int qmin(MemorySegment struct) {
        return struct.get(qmin$LAYOUT, qmin$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int qmin
     * }
     */
    public static void qmin(MemorySegment struct, int fieldValue) {
        struct.set(qmin$LAYOUT, qmin$OFFSET, fieldValue);
    }

    private static final OfInt qmax$LAYOUT = (OfInt)$LAYOUT.select(groupElement("qmax"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int qmax
     * }
     */
    public static final OfInt qmax$layout() {
        return qmax$LAYOUT;
    }

    private static final long qmax$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int qmax
     * }
     */
    public static final long qmax$offset() {
        return qmax$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int qmax
     * }
     */
    public static int qmax(MemorySegment struct) {
        return struct.get(qmax$LAYOUT, qmax$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int qmax
     * }
     */
    public static void qmax(MemorySegment struct, int fieldValue) {
        struct.set(qmax$LAYOUT, qmax$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

