// Generated by jextract

package com.github.gotson.nightmonkeys.webp.lib.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class encode_h {

    encode_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.libraryLookup(System.mapLibraryName("webp"), LIBRARY_ARENA)
            .or(SymbolLookup.loaderLookup())
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfInt C_LONG = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfDouble C_LONG_DOUBLE = ValueLayout.JAVA_DOUBLE;
    private static final int WEBP_ENCODER_ABI_VERSION = (int)527L;
    /**
     * {@snippet lang=c :
     * #define WEBP_ENCODER_ABI_VERSION 527
     * }
     */
    public static int WEBP_ENCODER_ABI_VERSION() {
        return WEBP_ENCODER_ABI_VERSION;
    }
    private static final int WEBP_MAX_DIMENSION = (int)16383L;
    /**
     * {@snippet lang=c :
     * #define WEBP_MAX_DIMENSION 16383
     * }
     */
    public static int WEBP_MAX_DIMENSION() {
        return WEBP_MAX_DIMENSION;
    }
    /**
     * {@snippet lang=c :
     * typedef long long ptrdiff_t
     * }
     */
    public static final OfLong ptrdiff_t = encode_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long size_t
     * }
     */
    public static final OfLong size_t = encode_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned short wchar_t
     * }
     */
    public static final OfShort wchar_t = encode_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef double max_align_t
     * }
     */
    public static final OfDouble max_align_t = encode_h.C_DOUBLE;
    /**
     * {@snippet lang=c :
     * typedef signed char int8_t
     * }
     */
    public static final OfByte int8_t = encode_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char uint8_t
     * }
     */
    public static final OfByte uint8_t = encode_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short int16_t
     * }
     */
    public static final OfShort int16_t = encode_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short uint16_t
     * }
     */
    public static final OfShort uint16_t = encode_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int int32_t
     * }
     */
    public static final OfInt int32_t = encode_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int uint32_t
     * }
     */
    public static final OfInt uint32_t = encode_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long uint64_t
     * }
     */
    public static final OfLong uint64_t = encode_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef long long int64_t
     * }
     */
    public static final OfLong int64_t = encode_h.C_LONG_LONG;

    private static class WebPMalloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_POINTER,
            encode_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPMalloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *WebPMalloc(size_t size)
     * }
     */
    public static FunctionDescriptor WebPMalloc$descriptor() {
        return WebPMalloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *WebPMalloc(size_t size)
     * }
     */
    public static MethodHandle WebPMalloc$handle() {
        return WebPMalloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *WebPMalloc(size_t size)
     * }
     */
    public static MemorySegment WebPMalloc$address() {
        return WebPMalloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *WebPMalloc(size_t size)
     * }
     */
    public static MemorySegment WebPMalloc(long size) {
        var mh$ = WebPMalloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPMalloc", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            encode_h.C_POINTER
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void WebPFree(void *ptr)
     * }
     */
    public static FunctionDescriptor WebPFree$descriptor() {
        return WebPFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void WebPFree(void *ptr)
     * }
     */
    public static MethodHandle WebPFree$handle() {
        return WebPFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void WebPFree(void *ptr)
     * }
     */
    public static MemorySegment WebPFree$address() {
        return WebPFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void WebPFree(void *ptr)
     * }
     */
    public static void WebPFree(MemorySegment ptr) {
        var mh$ = WebPFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPFree", ptr);
            }
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPGetEncoderVersion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_INT    );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPGetEncoderVersion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPGetEncoderVersion()
     * }
     */
    public static FunctionDescriptor WebPGetEncoderVersion$descriptor() {
        return WebPGetEncoderVersion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPGetEncoderVersion()
     * }
     */
    public static MethodHandle WebPGetEncoderVersion$handle() {
        return WebPGetEncoderVersion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPGetEncoderVersion()
     * }
     */
    public static MemorySegment WebPGetEncoderVersion$address() {
        return WebPGetEncoderVersion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPGetEncoderVersion()
     * }
     */
    public static int WebPGetEncoderVersion() {
        var mh$ = WebPGetEncoderVersion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPGetEncoderVersion");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPEncodeRGB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_LONG_LONG,
            encode_h.C_POINTER,
            encode_h.C_INT,
            encode_h.C_INT,
            encode_h.C_INT,
            encode_h.C_FLOAT,
            encode_h.C_POINTER
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPEncodeRGB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t WebPEncodeRGB(const uint8_t *rgb, int width, int height, int stride, float quality_factor, uint8_t **output)
     * }
     */
    public static FunctionDescriptor WebPEncodeRGB$descriptor() {
        return WebPEncodeRGB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t WebPEncodeRGB(const uint8_t *rgb, int width, int height, int stride, float quality_factor, uint8_t **output)
     * }
     */
    public static MethodHandle WebPEncodeRGB$handle() {
        return WebPEncodeRGB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t WebPEncodeRGB(const uint8_t *rgb, int width, int height, int stride, float quality_factor, uint8_t **output)
     * }
     */
    public static MemorySegment WebPEncodeRGB$address() {
        return WebPEncodeRGB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t WebPEncodeRGB(const uint8_t *rgb, int width, int height, int stride, float quality_factor, uint8_t **output)
     * }
     */
    public static long WebPEncodeRGB(MemorySegment rgb, int width, int height, int stride, float quality_factor, MemorySegment output) {
        var mh$ = WebPEncodeRGB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPEncodeRGB", rgb, width, height, stride, quality_factor, output);
            }
            return (long)mh$.invokeExact(rgb, width, height, stride, quality_factor, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPEncodeBGR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_LONG_LONG,
            encode_h.C_POINTER,
            encode_h.C_INT,
            encode_h.C_INT,
            encode_h.C_INT,
            encode_h.C_FLOAT,
            encode_h.C_POINTER
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPEncodeBGR");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t WebPEncodeBGR(const uint8_t *bgr, int width, int height, int stride, float quality_factor, uint8_t **output)
     * }
     */
    public static FunctionDescriptor WebPEncodeBGR$descriptor() {
        return WebPEncodeBGR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t WebPEncodeBGR(const uint8_t *bgr, int width, int height, int stride, float quality_factor, uint8_t **output)
     * }
     */
    public static MethodHandle WebPEncodeBGR$handle() {
        return WebPEncodeBGR.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t WebPEncodeBGR(const uint8_t *bgr, int width, int height, int stride, float quality_factor, uint8_t **output)
     * }
     */
    public static MemorySegment WebPEncodeBGR$address() {
        return WebPEncodeBGR.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t WebPEncodeBGR(const uint8_t *bgr, int width, int height, int stride, float quality_factor, uint8_t **output)
     * }
     */
    public static long WebPEncodeBGR(MemorySegment bgr, int width, int height, int stride, float quality_factor, MemorySegment output) {
        var mh$ = WebPEncodeBGR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPEncodeBGR", bgr, width, height, stride, quality_factor, output);
            }
            return (long)mh$.invokeExact(bgr, width, height, stride, quality_factor, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPEncodeRGBA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_LONG_LONG,
            encode_h.C_POINTER,
            encode_h.C_INT,
            encode_h.C_INT,
            encode_h.C_INT,
            encode_h.C_FLOAT,
            encode_h.C_POINTER
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPEncodeRGBA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t WebPEncodeRGBA(const uint8_t *rgba, int width, int height, int stride, float quality_factor, uint8_t **output)
     * }
     */
    public static FunctionDescriptor WebPEncodeRGBA$descriptor() {
        return WebPEncodeRGBA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t WebPEncodeRGBA(const uint8_t *rgba, int width, int height, int stride, float quality_factor, uint8_t **output)
     * }
     */
    public static MethodHandle WebPEncodeRGBA$handle() {
        return WebPEncodeRGBA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t WebPEncodeRGBA(const uint8_t *rgba, int width, int height, int stride, float quality_factor, uint8_t **output)
     * }
     */
    public static MemorySegment WebPEncodeRGBA$address() {
        return WebPEncodeRGBA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t WebPEncodeRGBA(const uint8_t *rgba, int width, int height, int stride, float quality_factor, uint8_t **output)
     * }
     */
    public static long WebPEncodeRGBA(MemorySegment rgba, int width, int height, int stride, float quality_factor, MemorySegment output) {
        var mh$ = WebPEncodeRGBA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPEncodeRGBA", rgba, width, height, stride, quality_factor, output);
            }
            return (long)mh$.invokeExact(rgba, width, height, stride, quality_factor, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPEncodeBGRA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_LONG_LONG,
            encode_h.C_POINTER,
            encode_h.C_INT,
            encode_h.C_INT,
            encode_h.C_INT,
            encode_h.C_FLOAT,
            encode_h.C_POINTER
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPEncodeBGRA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t WebPEncodeBGRA(const uint8_t *bgra, int width, int height, int stride, float quality_factor, uint8_t **output)
     * }
     */
    public static FunctionDescriptor WebPEncodeBGRA$descriptor() {
        return WebPEncodeBGRA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t WebPEncodeBGRA(const uint8_t *bgra, int width, int height, int stride, float quality_factor, uint8_t **output)
     * }
     */
    public static MethodHandle WebPEncodeBGRA$handle() {
        return WebPEncodeBGRA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t WebPEncodeBGRA(const uint8_t *bgra, int width, int height, int stride, float quality_factor, uint8_t **output)
     * }
     */
    public static MemorySegment WebPEncodeBGRA$address() {
        return WebPEncodeBGRA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t WebPEncodeBGRA(const uint8_t *bgra, int width, int height, int stride, float quality_factor, uint8_t **output)
     * }
     */
    public static long WebPEncodeBGRA(MemorySegment bgra, int width, int height, int stride, float quality_factor, MemorySegment output) {
        var mh$ = WebPEncodeBGRA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPEncodeBGRA", bgra, width, height, stride, quality_factor, output);
            }
            return (long)mh$.invokeExact(bgra, width, height, stride, quality_factor, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPEncodeLosslessRGB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_LONG_LONG,
            encode_h.C_POINTER,
            encode_h.C_INT,
            encode_h.C_INT,
            encode_h.C_INT,
            encode_h.C_POINTER
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPEncodeLosslessRGB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t WebPEncodeLosslessRGB(const uint8_t *rgb, int width, int height, int stride, uint8_t **output)
     * }
     */
    public static FunctionDescriptor WebPEncodeLosslessRGB$descriptor() {
        return WebPEncodeLosslessRGB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t WebPEncodeLosslessRGB(const uint8_t *rgb, int width, int height, int stride, uint8_t **output)
     * }
     */
    public static MethodHandle WebPEncodeLosslessRGB$handle() {
        return WebPEncodeLosslessRGB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t WebPEncodeLosslessRGB(const uint8_t *rgb, int width, int height, int stride, uint8_t **output)
     * }
     */
    public static MemorySegment WebPEncodeLosslessRGB$address() {
        return WebPEncodeLosslessRGB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t WebPEncodeLosslessRGB(const uint8_t *rgb, int width, int height, int stride, uint8_t **output)
     * }
     */
    public static long WebPEncodeLosslessRGB(MemorySegment rgb, int width, int height, int stride, MemorySegment output) {
        var mh$ = WebPEncodeLosslessRGB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPEncodeLosslessRGB", rgb, width, height, stride, output);
            }
            return (long)mh$.invokeExact(rgb, width, height, stride, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPEncodeLosslessBGR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_LONG_LONG,
            encode_h.C_POINTER,
            encode_h.C_INT,
            encode_h.C_INT,
            encode_h.C_INT,
            encode_h.C_POINTER
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPEncodeLosslessBGR");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t WebPEncodeLosslessBGR(const uint8_t *bgr, int width, int height, int stride, uint8_t **output)
     * }
     */
    public static FunctionDescriptor WebPEncodeLosslessBGR$descriptor() {
        return WebPEncodeLosslessBGR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t WebPEncodeLosslessBGR(const uint8_t *bgr, int width, int height, int stride, uint8_t **output)
     * }
     */
    public static MethodHandle WebPEncodeLosslessBGR$handle() {
        return WebPEncodeLosslessBGR.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t WebPEncodeLosslessBGR(const uint8_t *bgr, int width, int height, int stride, uint8_t **output)
     * }
     */
    public static MemorySegment WebPEncodeLosslessBGR$address() {
        return WebPEncodeLosslessBGR.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t WebPEncodeLosslessBGR(const uint8_t *bgr, int width, int height, int stride, uint8_t **output)
     * }
     */
    public static long WebPEncodeLosslessBGR(MemorySegment bgr, int width, int height, int stride, MemorySegment output) {
        var mh$ = WebPEncodeLosslessBGR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPEncodeLosslessBGR", bgr, width, height, stride, output);
            }
            return (long)mh$.invokeExact(bgr, width, height, stride, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPEncodeLosslessRGBA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_LONG_LONG,
            encode_h.C_POINTER,
            encode_h.C_INT,
            encode_h.C_INT,
            encode_h.C_INT,
            encode_h.C_POINTER
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPEncodeLosslessRGBA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t WebPEncodeLosslessRGBA(const uint8_t *rgba, int width, int height, int stride, uint8_t **output)
     * }
     */
    public static FunctionDescriptor WebPEncodeLosslessRGBA$descriptor() {
        return WebPEncodeLosslessRGBA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t WebPEncodeLosslessRGBA(const uint8_t *rgba, int width, int height, int stride, uint8_t **output)
     * }
     */
    public static MethodHandle WebPEncodeLosslessRGBA$handle() {
        return WebPEncodeLosslessRGBA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t WebPEncodeLosslessRGBA(const uint8_t *rgba, int width, int height, int stride, uint8_t **output)
     * }
     */
    public static MemorySegment WebPEncodeLosslessRGBA$address() {
        return WebPEncodeLosslessRGBA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t WebPEncodeLosslessRGBA(const uint8_t *rgba, int width, int height, int stride, uint8_t **output)
     * }
     */
    public static long WebPEncodeLosslessRGBA(MemorySegment rgba, int width, int height, int stride, MemorySegment output) {
        var mh$ = WebPEncodeLosslessRGBA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPEncodeLosslessRGBA", rgba, width, height, stride, output);
            }
            return (long)mh$.invokeExact(rgba, width, height, stride, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPEncodeLosslessBGRA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_LONG_LONG,
            encode_h.C_POINTER,
            encode_h.C_INT,
            encode_h.C_INT,
            encode_h.C_INT,
            encode_h.C_POINTER
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPEncodeLosslessBGRA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t WebPEncodeLosslessBGRA(const uint8_t *bgra, int width, int height, int stride, uint8_t **output)
     * }
     */
    public static FunctionDescriptor WebPEncodeLosslessBGRA$descriptor() {
        return WebPEncodeLosslessBGRA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t WebPEncodeLosslessBGRA(const uint8_t *bgra, int width, int height, int stride, uint8_t **output)
     * }
     */
    public static MethodHandle WebPEncodeLosslessBGRA$handle() {
        return WebPEncodeLosslessBGRA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t WebPEncodeLosslessBGRA(const uint8_t *bgra, int width, int height, int stride, uint8_t **output)
     * }
     */
    public static MemorySegment WebPEncodeLosslessBGRA$address() {
        return WebPEncodeLosslessBGRA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t WebPEncodeLosslessBGRA(const uint8_t *bgra, int width, int height, int stride, uint8_t **output)
     * }
     */
    public static long WebPEncodeLosslessBGRA(MemorySegment bgra, int width, int height, int stride, MemorySegment output) {
        var mh$ = WebPEncodeLosslessBGRA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPEncodeLosslessBGRA", bgra, width, height, stride, output);
            }
            return (long)mh$.invokeExact(bgra, width, height, stride, output);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int WEBP_HINT_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WebPImageHint.WEBP_HINT_DEFAULT = 0
     * }
     */
    public static int WEBP_HINT_DEFAULT() {
        return WEBP_HINT_DEFAULT;
    }
    private static final int WEBP_HINT_PICTURE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WebPImageHint.WEBP_HINT_PICTURE = 1
     * }
     */
    public static int WEBP_HINT_PICTURE() {
        return WEBP_HINT_PICTURE;
    }
    private static final int WEBP_HINT_PHOTO = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WebPImageHint.WEBP_HINT_PHOTO = 2
     * }
     */
    public static int WEBP_HINT_PHOTO() {
        return WEBP_HINT_PHOTO;
    }
    private static final int WEBP_HINT_GRAPH = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WebPImageHint.WEBP_HINT_GRAPH = 3
     * }
     */
    public static int WEBP_HINT_GRAPH() {
        return WEBP_HINT_GRAPH;
    }
    private static final int WEBP_HINT_LAST = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WebPImageHint.WEBP_HINT_LAST = 4
     * }
     */
    public static int WEBP_HINT_LAST() {
        return WEBP_HINT_LAST;
    }
    private static final int WEBP_PRESET_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WebPPreset.WEBP_PRESET_DEFAULT = 0
     * }
     */
    public static int WEBP_PRESET_DEFAULT() {
        return WEBP_PRESET_DEFAULT;
    }
    private static final int WEBP_PRESET_PICTURE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WebPPreset.WEBP_PRESET_PICTURE = 1
     * }
     */
    public static int WEBP_PRESET_PICTURE() {
        return WEBP_PRESET_PICTURE;
    }
    private static final int WEBP_PRESET_PHOTO = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WebPPreset.WEBP_PRESET_PHOTO = 2
     * }
     */
    public static int WEBP_PRESET_PHOTO() {
        return WEBP_PRESET_PHOTO;
    }
    private static final int WEBP_PRESET_DRAWING = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WebPPreset.WEBP_PRESET_DRAWING = 3
     * }
     */
    public static int WEBP_PRESET_DRAWING() {
        return WEBP_PRESET_DRAWING;
    }
    private static final int WEBP_PRESET_ICON = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WebPPreset.WEBP_PRESET_ICON = 4
     * }
     */
    public static int WEBP_PRESET_ICON() {
        return WEBP_PRESET_ICON;
    }
    private static final int WEBP_PRESET_TEXT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum WebPPreset.WEBP_PRESET_TEXT = 5
     * }
     */
    public static int WEBP_PRESET_TEXT() {
        return WEBP_PRESET_TEXT;
    }

    private static class WebPConfigInitInternal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_INT,
            encode_h.C_POINTER,
            encode_h.C_INT,
            encode_h.C_FLOAT,
            encode_h.C_INT
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPConfigInitInternal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPConfigInitInternal(WebPConfig *, WebPPreset, float, int)
     * }
     */
    public static FunctionDescriptor WebPConfigInitInternal$descriptor() {
        return WebPConfigInitInternal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPConfigInitInternal(WebPConfig *, WebPPreset, float, int)
     * }
     */
    public static MethodHandle WebPConfigInitInternal$handle() {
        return WebPConfigInitInternal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPConfigInitInternal(WebPConfig *, WebPPreset, float, int)
     * }
     */
    public static MemorySegment WebPConfigInitInternal$address() {
        return WebPConfigInitInternal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPConfigInitInternal(WebPConfig *, WebPPreset, float, int)
     * }
     */
    public static int WebPConfigInitInternal(MemorySegment x0, int x1, float x2, int x3) {
        var mh$ = WebPConfigInitInternal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPConfigInitInternal", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPConfigLosslessPreset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_INT,
            encode_h.C_POINTER,
            encode_h.C_INT
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPConfigLosslessPreset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPConfigLosslessPreset(WebPConfig *config, int level)
     * }
     */
    public static FunctionDescriptor WebPConfigLosslessPreset$descriptor() {
        return WebPConfigLosslessPreset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPConfigLosslessPreset(WebPConfig *config, int level)
     * }
     */
    public static MethodHandle WebPConfigLosslessPreset$handle() {
        return WebPConfigLosslessPreset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPConfigLosslessPreset(WebPConfig *config, int level)
     * }
     */
    public static MemorySegment WebPConfigLosslessPreset$address() {
        return WebPConfigLosslessPreset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPConfigLosslessPreset(WebPConfig *config, int level)
     * }
     */
    public static int WebPConfigLosslessPreset(MemorySegment config, int level) {
        var mh$ = WebPConfigLosslessPreset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPConfigLosslessPreset", config, level);
            }
            return (int)mh$.invokeExact(config, level);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPValidateConfig {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_INT,
            encode_h.C_POINTER
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPValidateConfig");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPValidateConfig(const WebPConfig *config)
     * }
     */
    public static FunctionDescriptor WebPValidateConfig$descriptor() {
        return WebPValidateConfig.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPValidateConfig(const WebPConfig *config)
     * }
     */
    public static MethodHandle WebPValidateConfig$handle() {
        return WebPValidateConfig.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPValidateConfig(const WebPConfig *config)
     * }
     */
    public static MemorySegment WebPValidateConfig$address() {
        return WebPValidateConfig.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPValidateConfig(const WebPConfig *config)
     * }
     */
    public static int WebPValidateConfig(MemorySegment config) {
        var mh$ = WebPValidateConfig.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPValidateConfig", config);
            }
            return (int)mh$.invokeExact(config);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPMemoryWriterInit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            encode_h.C_POINTER
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPMemoryWriterInit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void WebPMemoryWriterInit(WebPMemoryWriter *writer)
     * }
     */
    public static FunctionDescriptor WebPMemoryWriterInit$descriptor() {
        return WebPMemoryWriterInit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void WebPMemoryWriterInit(WebPMemoryWriter *writer)
     * }
     */
    public static MethodHandle WebPMemoryWriterInit$handle() {
        return WebPMemoryWriterInit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void WebPMemoryWriterInit(WebPMemoryWriter *writer)
     * }
     */
    public static MemorySegment WebPMemoryWriterInit$address() {
        return WebPMemoryWriterInit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void WebPMemoryWriterInit(WebPMemoryWriter *writer)
     * }
     */
    public static void WebPMemoryWriterInit(MemorySegment writer) {
        var mh$ = WebPMemoryWriterInit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPMemoryWriterInit", writer);
            }
            mh$.invokeExact(writer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPMemoryWriterClear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            encode_h.C_POINTER
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPMemoryWriterClear");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void WebPMemoryWriterClear(WebPMemoryWriter *writer)
     * }
     */
    public static FunctionDescriptor WebPMemoryWriterClear$descriptor() {
        return WebPMemoryWriterClear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void WebPMemoryWriterClear(WebPMemoryWriter *writer)
     * }
     */
    public static MethodHandle WebPMemoryWriterClear$handle() {
        return WebPMemoryWriterClear.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void WebPMemoryWriterClear(WebPMemoryWriter *writer)
     * }
     */
    public static MemorySegment WebPMemoryWriterClear$address() {
        return WebPMemoryWriterClear.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void WebPMemoryWriterClear(WebPMemoryWriter *writer)
     * }
     */
    public static void WebPMemoryWriterClear(MemorySegment writer) {
        var mh$ = WebPMemoryWriterClear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPMemoryWriterClear", writer);
            }
            mh$.invokeExact(writer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPMemoryWrite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_INT,
            encode_h.C_POINTER,
            encode_h.C_LONG_LONG,
            encode_h.C_POINTER
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPMemoryWrite");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPMemoryWrite(const uint8_t *data, size_t data_size, const WebPPicture *picture)
     * }
     */
    public static FunctionDescriptor WebPMemoryWrite$descriptor() {
        return WebPMemoryWrite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPMemoryWrite(const uint8_t *data, size_t data_size, const WebPPicture *picture)
     * }
     */
    public static MethodHandle WebPMemoryWrite$handle() {
        return WebPMemoryWrite.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPMemoryWrite(const uint8_t *data, size_t data_size, const WebPPicture *picture)
     * }
     */
    public static MemorySegment WebPMemoryWrite$address() {
        return WebPMemoryWrite.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPMemoryWrite(const uint8_t *data, size_t data_size, const WebPPicture *picture)
     * }
     */
    public static int WebPMemoryWrite(MemorySegment data, long data_size, MemorySegment picture) {
        var mh$ = WebPMemoryWrite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPMemoryWrite", data, data_size, picture);
            }
            return (int)mh$.invokeExact(data, data_size, picture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int WEBP_YUV420 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WebPEncCSP.WEBP_YUV420 = 0
     * }
     */
    public static int WEBP_YUV420() {
        return WEBP_YUV420;
    }
    private static final int WEBP_YUV420A = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WebPEncCSP.WEBP_YUV420A = 4
     * }
     */
    public static int WEBP_YUV420A() {
        return WEBP_YUV420A;
    }
    private static final int WEBP_CSP_UV_MASK = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WebPEncCSP.WEBP_CSP_UV_MASK = 3
     * }
     */
    public static int WEBP_CSP_UV_MASK() {
        return WEBP_CSP_UV_MASK;
    }
    private static final int WEBP_CSP_ALPHA_BIT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WebPEncCSP.WEBP_CSP_ALPHA_BIT = 4
     * }
     */
    public static int WEBP_CSP_ALPHA_BIT() {
        return WEBP_CSP_ALPHA_BIT;
    }
    private static final int VP8_ENC_OK = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WebPEncodingError.VP8_ENC_OK = 0
     * }
     */
    public static int VP8_ENC_OK() {
        return VP8_ENC_OK;
    }
    private static final int VP8_ENC_ERROR_OUT_OF_MEMORY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WebPEncodingError.VP8_ENC_ERROR_OUT_OF_MEMORY = 1
     * }
     */
    public static int VP8_ENC_ERROR_OUT_OF_MEMORY() {
        return VP8_ENC_ERROR_OUT_OF_MEMORY;
    }
    private static final int VP8_ENC_ERROR_BITSTREAM_OUT_OF_MEMORY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WebPEncodingError.VP8_ENC_ERROR_BITSTREAM_OUT_OF_MEMORY = 2
     * }
     */
    public static int VP8_ENC_ERROR_BITSTREAM_OUT_OF_MEMORY() {
        return VP8_ENC_ERROR_BITSTREAM_OUT_OF_MEMORY;
    }
    private static final int VP8_ENC_ERROR_NULL_PARAMETER = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WebPEncodingError.VP8_ENC_ERROR_NULL_PARAMETER = 3
     * }
     */
    public static int VP8_ENC_ERROR_NULL_PARAMETER() {
        return VP8_ENC_ERROR_NULL_PARAMETER;
    }
    private static final int VP8_ENC_ERROR_INVALID_CONFIGURATION = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WebPEncodingError.VP8_ENC_ERROR_INVALID_CONFIGURATION = 4
     * }
     */
    public static int VP8_ENC_ERROR_INVALID_CONFIGURATION() {
        return VP8_ENC_ERROR_INVALID_CONFIGURATION;
    }
    private static final int VP8_ENC_ERROR_BAD_DIMENSION = (int)5L;
    /**
     * {@snippet lang=c :
     * enum WebPEncodingError.VP8_ENC_ERROR_BAD_DIMENSION = 5
     * }
     */
    public static int VP8_ENC_ERROR_BAD_DIMENSION() {
        return VP8_ENC_ERROR_BAD_DIMENSION;
    }
    private static final int VP8_ENC_ERROR_PARTITION0_OVERFLOW = (int)6L;
    /**
     * {@snippet lang=c :
     * enum WebPEncodingError.VP8_ENC_ERROR_PARTITION0_OVERFLOW = 6
     * }
     */
    public static int VP8_ENC_ERROR_PARTITION0_OVERFLOW() {
        return VP8_ENC_ERROR_PARTITION0_OVERFLOW;
    }
    private static final int VP8_ENC_ERROR_PARTITION_OVERFLOW = (int)7L;
    /**
     * {@snippet lang=c :
     * enum WebPEncodingError.VP8_ENC_ERROR_PARTITION_OVERFLOW = 7
     * }
     */
    public static int VP8_ENC_ERROR_PARTITION_OVERFLOW() {
        return VP8_ENC_ERROR_PARTITION_OVERFLOW;
    }
    private static final int VP8_ENC_ERROR_BAD_WRITE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum WebPEncodingError.VP8_ENC_ERROR_BAD_WRITE = 8
     * }
     */
    public static int VP8_ENC_ERROR_BAD_WRITE() {
        return VP8_ENC_ERROR_BAD_WRITE;
    }
    private static final int VP8_ENC_ERROR_FILE_TOO_BIG = (int)9L;
    /**
     * {@snippet lang=c :
     * enum WebPEncodingError.VP8_ENC_ERROR_FILE_TOO_BIG = 9
     * }
     */
    public static int VP8_ENC_ERROR_FILE_TOO_BIG() {
        return VP8_ENC_ERROR_FILE_TOO_BIG;
    }
    private static final int VP8_ENC_ERROR_USER_ABORT = (int)10L;
    /**
     * {@snippet lang=c :
     * enum WebPEncodingError.VP8_ENC_ERROR_USER_ABORT = 10
     * }
     */
    public static int VP8_ENC_ERROR_USER_ABORT() {
        return VP8_ENC_ERROR_USER_ABORT;
    }
    private static final int VP8_ENC_ERROR_LAST = (int)11L;
    /**
     * {@snippet lang=c :
     * enum WebPEncodingError.VP8_ENC_ERROR_LAST = 11
     * }
     */
    public static int VP8_ENC_ERROR_LAST() {
        return VP8_ENC_ERROR_LAST;
    }

    private static class WebPPictureInitInternal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_INT,
            encode_h.C_POINTER,
            encode_h.C_INT
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPPictureInitInternal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPPictureInitInternal(WebPPicture *, int)
     * }
     */
    public static FunctionDescriptor WebPPictureInitInternal$descriptor() {
        return WebPPictureInitInternal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPPictureInitInternal(WebPPicture *, int)
     * }
     */
    public static MethodHandle WebPPictureInitInternal$handle() {
        return WebPPictureInitInternal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPPictureInitInternal(WebPPicture *, int)
     * }
     */
    public static MemorySegment WebPPictureInitInternal$address() {
        return WebPPictureInitInternal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPPictureInitInternal(WebPPicture *, int)
     * }
     */
    public static int WebPPictureInitInternal(MemorySegment x0, int x1) {
        var mh$ = WebPPictureInitInternal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPPictureInitInternal", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPPictureAlloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_INT,
            encode_h.C_POINTER
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPPictureAlloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPPictureAlloc(WebPPicture *picture)
     * }
     */
    public static FunctionDescriptor WebPPictureAlloc$descriptor() {
        return WebPPictureAlloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPPictureAlloc(WebPPicture *picture)
     * }
     */
    public static MethodHandle WebPPictureAlloc$handle() {
        return WebPPictureAlloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPPictureAlloc(WebPPicture *picture)
     * }
     */
    public static MemorySegment WebPPictureAlloc$address() {
        return WebPPictureAlloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPPictureAlloc(WebPPicture *picture)
     * }
     */
    public static int WebPPictureAlloc(MemorySegment picture) {
        var mh$ = WebPPictureAlloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPPictureAlloc", picture);
            }
            return (int)mh$.invokeExact(picture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPPictureFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            encode_h.C_POINTER
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPPictureFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void WebPPictureFree(WebPPicture *picture)
     * }
     */
    public static FunctionDescriptor WebPPictureFree$descriptor() {
        return WebPPictureFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void WebPPictureFree(WebPPicture *picture)
     * }
     */
    public static MethodHandle WebPPictureFree$handle() {
        return WebPPictureFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void WebPPictureFree(WebPPicture *picture)
     * }
     */
    public static MemorySegment WebPPictureFree$address() {
        return WebPPictureFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void WebPPictureFree(WebPPicture *picture)
     * }
     */
    public static void WebPPictureFree(MemorySegment picture) {
        var mh$ = WebPPictureFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPPictureFree", picture);
            }
            mh$.invokeExact(picture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPPictureCopy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_INT,
            encode_h.C_POINTER,
            encode_h.C_POINTER
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPPictureCopy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPPictureCopy(const WebPPicture *src, WebPPicture *dst)
     * }
     */
    public static FunctionDescriptor WebPPictureCopy$descriptor() {
        return WebPPictureCopy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPPictureCopy(const WebPPicture *src, WebPPicture *dst)
     * }
     */
    public static MethodHandle WebPPictureCopy$handle() {
        return WebPPictureCopy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPPictureCopy(const WebPPicture *src, WebPPicture *dst)
     * }
     */
    public static MemorySegment WebPPictureCopy$address() {
        return WebPPictureCopy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPPictureCopy(const WebPPicture *src, WebPPicture *dst)
     * }
     */
    public static int WebPPictureCopy(MemorySegment src, MemorySegment dst) {
        var mh$ = WebPPictureCopy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPPictureCopy", src, dst);
            }
            return (int)mh$.invokeExact(src, dst);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPPlaneDistortion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_INT,
            encode_h.C_POINTER,
            encode_h.C_LONG_LONG,
            encode_h.C_POINTER,
            encode_h.C_LONG_LONG,
            encode_h.C_INT,
            encode_h.C_INT,
            encode_h.C_LONG_LONG,
            encode_h.C_INT,
            encode_h.C_POINTER,
            encode_h.C_POINTER
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPPlaneDistortion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPPlaneDistortion(const uint8_t *src, size_t src_stride, const uint8_t *ref, size_t ref_stride, int width, int height, size_t x_step, int type, float *distortion, float *result)
     * }
     */
    public static FunctionDescriptor WebPPlaneDistortion$descriptor() {
        return WebPPlaneDistortion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPPlaneDistortion(const uint8_t *src, size_t src_stride, const uint8_t *ref, size_t ref_stride, int width, int height, size_t x_step, int type, float *distortion, float *result)
     * }
     */
    public static MethodHandle WebPPlaneDistortion$handle() {
        return WebPPlaneDistortion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPPlaneDistortion(const uint8_t *src, size_t src_stride, const uint8_t *ref, size_t ref_stride, int width, int height, size_t x_step, int type, float *distortion, float *result)
     * }
     */
    public static MemorySegment WebPPlaneDistortion$address() {
        return WebPPlaneDistortion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPPlaneDistortion(const uint8_t *src, size_t src_stride, const uint8_t *ref, size_t ref_stride, int width, int height, size_t x_step, int type, float *distortion, float *result)
     * }
     */
    public static int WebPPlaneDistortion(MemorySegment src, long src_stride, MemorySegment ref, long ref_stride, int width, int height, long x_step, int type, MemorySegment distortion, MemorySegment result) {
        var mh$ = WebPPlaneDistortion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPPlaneDistortion", src, src_stride, ref, ref_stride, width, height, x_step, type, distortion, result);
            }
            return (int)mh$.invokeExact(src, src_stride, ref, ref_stride, width, height, x_step, type, distortion, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPPictureDistortion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_INT,
            encode_h.C_POINTER,
            encode_h.C_POINTER,
            encode_h.C_INT,
            encode_h.C_POINTER
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPPictureDistortion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPPictureDistortion(const WebPPicture *src, const WebPPicture *ref, int metric_type, float result[5])
     * }
     */
    public static FunctionDescriptor WebPPictureDistortion$descriptor() {
        return WebPPictureDistortion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPPictureDistortion(const WebPPicture *src, const WebPPicture *ref, int metric_type, float result[5])
     * }
     */
    public static MethodHandle WebPPictureDistortion$handle() {
        return WebPPictureDistortion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPPictureDistortion(const WebPPicture *src, const WebPPicture *ref, int metric_type, float result[5])
     * }
     */
    public static MemorySegment WebPPictureDistortion$address() {
        return WebPPictureDistortion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPPictureDistortion(const WebPPicture *src, const WebPPicture *ref, int metric_type, float result[5])
     * }
     */
    public static int WebPPictureDistortion(MemorySegment src, MemorySegment ref, int metric_type, MemorySegment result) {
        var mh$ = WebPPictureDistortion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPPictureDistortion", src, ref, metric_type, result);
            }
            return (int)mh$.invokeExact(src, ref, metric_type, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPPictureCrop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_INT,
            encode_h.C_POINTER,
            encode_h.C_INT,
            encode_h.C_INT,
            encode_h.C_INT,
            encode_h.C_INT
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPPictureCrop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPPictureCrop(WebPPicture *picture, int left, int top, int width, int height)
     * }
     */
    public static FunctionDescriptor WebPPictureCrop$descriptor() {
        return WebPPictureCrop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPPictureCrop(WebPPicture *picture, int left, int top, int width, int height)
     * }
     */
    public static MethodHandle WebPPictureCrop$handle() {
        return WebPPictureCrop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPPictureCrop(WebPPicture *picture, int left, int top, int width, int height)
     * }
     */
    public static MemorySegment WebPPictureCrop$address() {
        return WebPPictureCrop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPPictureCrop(WebPPicture *picture, int left, int top, int width, int height)
     * }
     */
    public static int WebPPictureCrop(MemorySegment picture, int left, int top, int width, int height) {
        var mh$ = WebPPictureCrop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPPictureCrop", picture, left, top, width, height);
            }
            return (int)mh$.invokeExact(picture, left, top, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPPictureView {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_INT,
            encode_h.C_POINTER,
            encode_h.C_INT,
            encode_h.C_INT,
            encode_h.C_INT,
            encode_h.C_INT,
            encode_h.C_POINTER
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPPictureView");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPPictureView(const WebPPicture *src, int left, int top, int width, int height, WebPPicture *dst)
     * }
     */
    public static FunctionDescriptor WebPPictureView$descriptor() {
        return WebPPictureView.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPPictureView(const WebPPicture *src, int left, int top, int width, int height, WebPPicture *dst)
     * }
     */
    public static MethodHandle WebPPictureView$handle() {
        return WebPPictureView.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPPictureView(const WebPPicture *src, int left, int top, int width, int height, WebPPicture *dst)
     * }
     */
    public static MemorySegment WebPPictureView$address() {
        return WebPPictureView.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPPictureView(const WebPPicture *src, int left, int top, int width, int height, WebPPicture *dst)
     * }
     */
    public static int WebPPictureView(MemorySegment src, int left, int top, int width, int height, MemorySegment dst) {
        var mh$ = WebPPictureView.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPPictureView", src, left, top, width, height, dst);
            }
            return (int)mh$.invokeExact(src, left, top, width, height, dst);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPPictureIsView {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_INT,
            encode_h.C_POINTER
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPPictureIsView");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPPictureIsView(const WebPPicture *picture)
     * }
     */
    public static FunctionDescriptor WebPPictureIsView$descriptor() {
        return WebPPictureIsView.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPPictureIsView(const WebPPicture *picture)
     * }
     */
    public static MethodHandle WebPPictureIsView$handle() {
        return WebPPictureIsView.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPPictureIsView(const WebPPicture *picture)
     * }
     */
    public static MemorySegment WebPPictureIsView$address() {
        return WebPPictureIsView.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPPictureIsView(const WebPPicture *picture)
     * }
     */
    public static int WebPPictureIsView(MemorySegment picture) {
        var mh$ = WebPPictureIsView.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPPictureIsView", picture);
            }
            return (int)mh$.invokeExact(picture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPPictureRescale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_INT,
            encode_h.C_POINTER,
            encode_h.C_INT,
            encode_h.C_INT
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPPictureRescale");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPPictureRescale(WebPPicture *picture, int width, int height)
     * }
     */
    public static FunctionDescriptor WebPPictureRescale$descriptor() {
        return WebPPictureRescale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPPictureRescale(WebPPicture *picture, int width, int height)
     * }
     */
    public static MethodHandle WebPPictureRescale$handle() {
        return WebPPictureRescale.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPPictureRescale(WebPPicture *picture, int width, int height)
     * }
     */
    public static MemorySegment WebPPictureRescale$address() {
        return WebPPictureRescale.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPPictureRescale(WebPPicture *picture, int width, int height)
     * }
     */
    public static int WebPPictureRescale(MemorySegment picture, int width, int height) {
        var mh$ = WebPPictureRescale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPPictureRescale", picture, width, height);
            }
            return (int)mh$.invokeExact(picture, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPPictureImportRGB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_INT,
            encode_h.C_POINTER,
            encode_h.C_POINTER,
            encode_h.C_INT
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPPictureImportRGB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPPictureImportRGB(WebPPicture *picture, const uint8_t *rgb, int rgb_stride)
     * }
     */
    public static FunctionDescriptor WebPPictureImportRGB$descriptor() {
        return WebPPictureImportRGB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPPictureImportRGB(WebPPicture *picture, const uint8_t *rgb, int rgb_stride)
     * }
     */
    public static MethodHandle WebPPictureImportRGB$handle() {
        return WebPPictureImportRGB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPPictureImportRGB(WebPPicture *picture, const uint8_t *rgb, int rgb_stride)
     * }
     */
    public static MemorySegment WebPPictureImportRGB$address() {
        return WebPPictureImportRGB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPPictureImportRGB(WebPPicture *picture, const uint8_t *rgb, int rgb_stride)
     * }
     */
    public static int WebPPictureImportRGB(MemorySegment picture, MemorySegment rgb, int rgb_stride) {
        var mh$ = WebPPictureImportRGB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPPictureImportRGB", picture, rgb, rgb_stride);
            }
            return (int)mh$.invokeExact(picture, rgb, rgb_stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPPictureImportRGBA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_INT,
            encode_h.C_POINTER,
            encode_h.C_POINTER,
            encode_h.C_INT
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPPictureImportRGBA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPPictureImportRGBA(WebPPicture *picture, const uint8_t *rgba, int rgba_stride)
     * }
     */
    public static FunctionDescriptor WebPPictureImportRGBA$descriptor() {
        return WebPPictureImportRGBA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPPictureImportRGBA(WebPPicture *picture, const uint8_t *rgba, int rgba_stride)
     * }
     */
    public static MethodHandle WebPPictureImportRGBA$handle() {
        return WebPPictureImportRGBA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPPictureImportRGBA(WebPPicture *picture, const uint8_t *rgba, int rgba_stride)
     * }
     */
    public static MemorySegment WebPPictureImportRGBA$address() {
        return WebPPictureImportRGBA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPPictureImportRGBA(WebPPicture *picture, const uint8_t *rgba, int rgba_stride)
     * }
     */
    public static int WebPPictureImportRGBA(MemorySegment picture, MemorySegment rgba, int rgba_stride) {
        var mh$ = WebPPictureImportRGBA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPPictureImportRGBA", picture, rgba, rgba_stride);
            }
            return (int)mh$.invokeExact(picture, rgba, rgba_stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPPictureImportRGBX {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_INT,
            encode_h.C_POINTER,
            encode_h.C_POINTER,
            encode_h.C_INT
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPPictureImportRGBX");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPPictureImportRGBX(WebPPicture *picture, const uint8_t *rgbx, int rgbx_stride)
     * }
     */
    public static FunctionDescriptor WebPPictureImportRGBX$descriptor() {
        return WebPPictureImportRGBX.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPPictureImportRGBX(WebPPicture *picture, const uint8_t *rgbx, int rgbx_stride)
     * }
     */
    public static MethodHandle WebPPictureImportRGBX$handle() {
        return WebPPictureImportRGBX.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPPictureImportRGBX(WebPPicture *picture, const uint8_t *rgbx, int rgbx_stride)
     * }
     */
    public static MemorySegment WebPPictureImportRGBX$address() {
        return WebPPictureImportRGBX.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPPictureImportRGBX(WebPPicture *picture, const uint8_t *rgbx, int rgbx_stride)
     * }
     */
    public static int WebPPictureImportRGBX(MemorySegment picture, MemorySegment rgbx, int rgbx_stride) {
        var mh$ = WebPPictureImportRGBX.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPPictureImportRGBX", picture, rgbx, rgbx_stride);
            }
            return (int)mh$.invokeExact(picture, rgbx, rgbx_stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPPictureImportBGR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_INT,
            encode_h.C_POINTER,
            encode_h.C_POINTER,
            encode_h.C_INT
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPPictureImportBGR");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPPictureImportBGR(WebPPicture *picture, const uint8_t *bgr, int bgr_stride)
     * }
     */
    public static FunctionDescriptor WebPPictureImportBGR$descriptor() {
        return WebPPictureImportBGR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPPictureImportBGR(WebPPicture *picture, const uint8_t *bgr, int bgr_stride)
     * }
     */
    public static MethodHandle WebPPictureImportBGR$handle() {
        return WebPPictureImportBGR.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPPictureImportBGR(WebPPicture *picture, const uint8_t *bgr, int bgr_stride)
     * }
     */
    public static MemorySegment WebPPictureImportBGR$address() {
        return WebPPictureImportBGR.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPPictureImportBGR(WebPPicture *picture, const uint8_t *bgr, int bgr_stride)
     * }
     */
    public static int WebPPictureImportBGR(MemorySegment picture, MemorySegment bgr, int bgr_stride) {
        var mh$ = WebPPictureImportBGR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPPictureImportBGR", picture, bgr, bgr_stride);
            }
            return (int)mh$.invokeExact(picture, bgr, bgr_stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPPictureImportBGRA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_INT,
            encode_h.C_POINTER,
            encode_h.C_POINTER,
            encode_h.C_INT
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPPictureImportBGRA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPPictureImportBGRA(WebPPicture *picture, const uint8_t *bgra, int bgra_stride)
     * }
     */
    public static FunctionDescriptor WebPPictureImportBGRA$descriptor() {
        return WebPPictureImportBGRA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPPictureImportBGRA(WebPPicture *picture, const uint8_t *bgra, int bgra_stride)
     * }
     */
    public static MethodHandle WebPPictureImportBGRA$handle() {
        return WebPPictureImportBGRA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPPictureImportBGRA(WebPPicture *picture, const uint8_t *bgra, int bgra_stride)
     * }
     */
    public static MemorySegment WebPPictureImportBGRA$address() {
        return WebPPictureImportBGRA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPPictureImportBGRA(WebPPicture *picture, const uint8_t *bgra, int bgra_stride)
     * }
     */
    public static int WebPPictureImportBGRA(MemorySegment picture, MemorySegment bgra, int bgra_stride) {
        var mh$ = WebPPictureImportBGRA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPPictureImportBGRA", picture, bgra, bgra_stride);
            }
            return (int)mh$.invokeExact(picture, bgra, bgra_stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPPictureImportBGRX {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_INT,
            encode_h.C_POINTER,
            encode_h.C_POINTER,
            encode_h.C_INT
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPPictureImportBGRX");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPPictureImportBGRX(WebPPicture *picture, const uint8_t *bgrx, int bgrx_stride)
     * }
     */
    public static FunctionDescriptor WebPPictureImportBGRX$descriptor() {
        return WebPPictureImportBGRX.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPPictureImportBGRX(WebPPicture *picture, const uint8_t *bgrx, int bgrx_stride)
     * }
     */
    public static MethodHandle WebPPictureImportBGRX$handle() {
        return WebPPictureImportBGRX.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPPictureImportBGRX(WebPPicture *picture, const uint8_t *bgrx, int bgrx_stride)
     * }
     */
    public static MemorySegment WebPPictureImportBGRX$address() {
        return WebPPictureImportBGRX.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPPictureImportBGRX(WebPPicture *picture, const uint8_t *bgrx, int bgrx_stride)
     * }
     */
    public static int WebPPictureImportBGRX(MemorySegment picture, MemorySegment bgrx, int bgrx_stride) {
        var mh$ = WebPPictureImportBGRX.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPPictureImportBGRX", picture, bgrx, bgrx_stride);
            }
            return (int)mh$.invokeExact(picture, bgrx, bgrx_stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPPictureARGBToYUVA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_INT,
            encode_h.C_POINTER,
            encode_h.C_INT
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPPictureARGBToYUVA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPPictureARGBToYUVA(WebPPicture *picture, WebPEncCSP)
     * }
     */
    public static FunctionDescriptor WebPPictureARGBToYUVA$descriptor() {
        return WebPPictureARGBToYUVA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPPictureARGBToYUVA(WebPPicture *picture, WebPEncCSP)
     * }
     */
    public static MethodHandle WebPPictureARGBToYUVA$handle() {
        return WebPPictureARGBToYUVA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPPictureARGBToYUVA(WebPPicture *picture, WebPEncCSP)
     * }
     */
    public static MemorySegment WebPPictureARGBToYUVA$address() {
        return WebPPictureARGBToYUVA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPPictureARGBToYUVA(WebPPicture *picture, WebPEncCSP)
     * }
     */
    public static int WebPPictureARGBToYUVA(MemorySegment picture, int x1) {
        var mh$ = WebPPictureARGBToYUVA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPPictureARGBToYUVA", picture, x1);
            }
            return (int)mh$.invokeExact(picture, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPPictureARGBToYUVADithered {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_INT,
            encode_h.C_POINTER,
            encode_h.C_INT,
            encode_h.C_FLOAT
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPPictureARGBToYUVADithered");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPPictureARGBToYUVADithered(WebPPicture *picture, WebPEncCSP colorspace, float dithering)
     * }
     */
    public static FunctionDescriptor WebPPictureARGBToYUVADithered$descriptor() {
        return WebPPictureARGBToYUVADithered.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPPictureARGBToYUVADithered(WebPPicture *picture, WebPEncCSP colorspace, float dithering)
     * }
     */
    public static MethodHandle WebPPictureARGBToYUVADithered$handle() {
        return WebPPictureARGBToYUVADithered.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPPictureARGBToYUVADithered(WebPPicture *picture, WebPEncCSP colorspace, float dithering)
     * }
     */
    public static MemorySegment WebPPictureARGBToYUVADithered$address() {
        return WebPPictureARGBToYUVADithered.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPPictureARGBToYUVADithered(WebPPicture *picture, WebPEncCSP colorspace, float dithering)
     * }
     */
    public static int WebPPictureARGBToYUVADithered(MemorySegment picture, int colorspace, float dithering) {
        var mh$ = WebPPictureARGBToYUVADithered.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPPictureARGBToYUVADithered", picture, colorspace, dithering);
            }
            return (int)mh$.invokeExact(picture, colorspace, dithering);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPPictureSharpARGBToYUVA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_INT,
            encode_h.C_POINTER
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPPictureSharpARGBToYUVA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPPictureSharpARGBToYUVA(WebPPicture *picture)
     * }
     */
    public static FunctionDescriptor WebPPictureSharpARGBToYUVA$descriptor() {
        return WebPPictureSharpARGBToYUVA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPPictureSharpARGBToYUVA(WebPPicture *picture)
     * }
     */
    public static MethodHandle WebPPictureSharpARGBToYUVA$handle() {
        return WebPPictureSharpARGBToYUVA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPPictureSharpARGBToYUVA(WebPPicture *picture)
     * }
     */
    public static MemorySegment WebPPictureSharpARGBToYUVA$address() {
        return WebPPictureSharpARGBToYUVA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPPictureSharpARGBToYUVA(WebPPicture *picture)
     * }
     */
    public static int WebPPictureSharpARGBToYUVA(MemorySegment picture) {
        var mh$ = WebPPictureSharpARGBToYUVA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPPictureSharpARGBToYUVA", picture);
            }
            return (int)mh$.invokeExact(picture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPPictureSmartARGBToYUVA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_INT,
            encode_h.C_POINTER
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPPictureSmartARGBToYUVA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPPictureSmartARGBToYUVA(WebPPicture *picture)
     * }
     */
    public static FunctionDescriptor WebPPictureSmartARGBToYUVA$descriptor() {
        return WebPPictureSmartARGBToYUVA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPPictureSmartARGBToYUVA(WebPPicture *picture)
     * }
     */
    public static MethodHandle WebPPictureSmartARGBToYUVA$handle() {
        return WebPPictureSmartARGBToYUVA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPPictureSmartARGBToYUVA(WebPPicture *picture)
     * }
     */
    public static MemorySegment WebPPictureSmartARGBToYUVA$address() {
        return WebPPictureSmartARGBToYUVA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPPictureSmartARGBToYUVA(WebPPicture *picture)
     * }
     */
    public static int WebPPictureSmartARGBToYUVA(MemorySegment picture) {
        var mh$ = WebPPictureSmartARGBToYUVA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPPictureSmartARGBToYUVA", picture);
            }
            return (int)mh$.invokeExact(picture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPPictureYUVAToARGB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_INT,
            encode_h.C_POINTER
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPPictureYUVAToARGB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPPictureYUVAToARGB(WebPPicture *picture)
     * }
     */
    public static FunctionDescriptor WebPPictureYUVAToARGB$descriptor() {
        return WebPPictureYUVAToARGB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPPictureYUVAToARGB(WebPPicture *picture)
     * }
     */
    public static MethodHandle WebPPictureYUVAToARGB$handle() {
        return WebPPictureYUVAToARGB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPPictureYUVAToARGB(WebPPicture *picture)
     * }
     */
    public static MemorySegment WebPPictureYUVAToARGB$address() {
        return WebPPictureYUVAToARGB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPPictureYUVAToARGB(WebPPicture *picture)
     * }
     */
    public static int WebPPictureYUVAToARGB(MemorySegment picture) {
        var mh$ = WebPPictureYUVAToARGB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPPictureYUVAToARGB", picture);
            }
            return (int)mh$.invokeExact(picture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPCleanupTransparentArea {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            encode_h.C_POINTER
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPCleanupTransparentArea");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void WebPCleanupTransparentArea(WebPPicture *picture)
     * }
     */
    public static FunctionDescriptor WebPCleanupTransparentArea$descriptor() {
        return WebPCleanupTransparentArea.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void WebPCleanupTransparentArea(WebPPicture *picture)
     * }
     */
    public static MethodHandle WebPCleanupTransparentArea$handle() {
        return WebPCleanupTransparentArea.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void WebPCleanupTransparentArea(WebPPicture *picture)
     * }
     */
    public static MemorySegment WebPCleanupTransparentArea$address() {
        return WebPCleanupTransparentArea.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void WebPCleanupTransparentArea(WebPPicture *picture)
     * }
     */
    public static void WebPCleanupTransparentArea(MemorySegment picture) {
        var mh$ = WebPCleanupTransparentArea.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPCleanupTransparentArea", picture);
            }
            mh$.invokeExact(picture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPPictureHasTransparency {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_INT,
            encode_h.C_POINTER
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPPictureHasTransparency");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPPictureHasTransparency(const WebPPicture *picture)
     * }
     */
    public static FunctionDescriptor WebPPictureHasTransparency$descriptor() {
        return WebPPictureHasTransparency.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPPictureHasTransparency(const WebPPicture *picture)
     * }
     */
    public static MethodHandle WebPPictureHasTransparency$handle() {
        return WebPPictureHasTransparency.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPPictureHasTransparency(const WebPPicture *picture)
     * }
     */
    public static MemorySegment WebPPictureHasTransparency$address() {
        return WebPPictureHasTransparency.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPPictureHasTransparency(const WebPPicture *picture)
     * }
     */
    public static int WebPPictureHasTransparency(MemorySegment picture) {
        var mh$ = WebPPictureHasTransparency.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPPictureHasTransparency", picture);
            }
            return (int)mh$.invokeExact(picture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPBlendAlpha {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            encode_h.C_POINTER,
            encode_h.C_INT
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPBlendAlpha");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void WebPBlendAlpha(WebPPicture *picture, uint32_t background_rgb)
     * }
     */
    public static FunctionDescriptor WebPBlendAlpha$descriptor() {
        return WebPBlendAlpha.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void WebPBlendAlpha(WebPPicture *picture, uint32_t background_rgb)
     * }
     */
    public static MethodHandle WebPBlendAlpha$handle() {
        return WebPBlendAlpha.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void WebPBlendAlpha(WebPPicture *picture, uint32_t background_rgb)
     * }
     */
    public static MemorySegment WebPBlendAlpha$address() {
        return WebPBlendAlpha.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void WebPBlendAlpha(WebPPicture *picture, uint32_t background_rgb)
     * }
     */
    public static void WebPBlendAlpha(MemorySegment picture, int background_rgb) {
        var mh$ = WebPBlendAlpha.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPBlendAlpha", picture, background_rgb);
            }
            mh$.invokeExact(picture, background_rgb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WebPEncode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            encode_h.C_INT,
            encode_h.C_POINTER,
            encode_h.C_POINTER
        );

        public static final MemorySegment ADDR = encode_h.findOrThrow("WebPEncode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int WebPEncode(const WebPConfig *config, WebPPicture *picture)
     * }
     */
    public static FunctionDescriptor WebPEncode$descriptor() {
        return WebPEncode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int WebPEncode(const WebPConfig *config, WebPPicture *picture)
     * }
     */
    public static MethodHandle WebPEncode$handle() {
        return WebPEncode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int WebPEncode(const WebPConfig *config, WebPPicture *picture)
     * }
     */
    public static MemorySegment WebPEncode$address() {
        return WebPEncode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int WebPEncode(const WebPConfig *config, WebPPicture *picture)
     * }
     */
    public static int WebPEncode(MemorySegment config, MemorySegment picture) {
        var mh$ = WebPEncode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WebPEncode", config, picture);
            }
            return (int)mh$.invokeExact(config, picture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }
}

