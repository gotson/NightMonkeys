// Generated by jextract

package com.github.gotson.nightmonkeys.webp.lib.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct WebPDecBuffer {
 *     WEBP_CSP_MODE colorspace;
 *     int width;
 *     int height;
 *     int is_external_memory;
 *     union {
 *         WebPRGBABuffer RGBA;
 *         WebPYUVABuffer YUVA;
 *     } u;
 *     uint32_t pad[4];
 *     uint8_t *private_memory;
 * }
 * }
 */
public class WebPDecBuffer {

    WebPDecBuffer() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        decode_h.C_INT.withName("colorspace"),
        decode_h.C_INT.withName("width"),
        decode_h.C_INT.withName("height"),
        decode_h.C_INT.withName("is_external_memory"),
        WebPDecBuffer.u.layout().withName("u"),
        MemoryLayout.sequenceLayout(4, decode_h.C_INT).withName("pad"),
        decode_h.C_POINTER.withName("private_memory")
    ).withName("WebPDecBuffer");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt colorspace$LAYOUT = (OfInt)$LAYOUT.select(groupElement("colorspace"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WEBP_CSP_MODE colorspace
     * }
     */
    public static final OfInt colorspace$layout() {
        return colorspace$LAYOUT;
    }

    private static final long colorspace$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WEBP_CSP_MODE colorspace
     * }
     */
    public static final long colorspace$offset() {
        return colorspace$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WEBP_CSP_MODE colorspace
     * }
     */
    public static int colorspace(MemorySegment struct) {
        return struct.get(colorspace$LAYOUT, colorspace$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WEBP_CSP_MODE colorspace
     * }
     */
    public static void colorspace(MemorySegment struct, int fieldValue) {
        struct.set(colorspace$LAYOUT, colorspace$OFFSET, fieldValue);
    }

    private static final OfInt width$LAYOUT = (OfInt)$LAYOUT.select(groupElement("width"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int width
     * }
     */
    public static final OfInt width$layout() {
        return width$LAYOUT;
    }

    private static final long width$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int width
     * }
     */
    public static final long width$offset() {
        return width$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int width
     * }
     */
    public static int width(MemorySegment struct) {
        return struct.get(width$LAYOUT, width$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int width
     * }
     */
    public static void width(MemorySegment struct, int fieldValue) {
        struct.set(width$LAYOUT, width$OFFSET, fieldValue);
    }

    private static final OfInt height$LAYOUT = (OfInt)$LAYOUT.select(groupElement("height"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int height
     * }
     */
    public static final OfInt height$layout() {
        return height$LAYOUT;
    }

    private static final long height$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int height
     * }
     */
    public static final long height$offset() {
        return height$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int height
     * }
     */
    public static int height(MemorySegment struct) {
        return struct.get(height$LAYOUT, height$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int height
     * }
     */
    public static void height(MemorySegment struct, int fieldValue) {
        struct.set(height$LAYOUT, height$OFFSET, fieldValue);
    }

    private static final OfInt is_external_memory$LAYOUT = (OfInt)$LAYOUT.select(groupElement("is_external_memory"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int is_external_memory
     * }
     */
    public static final OfInt is_external_memory$layout() {
        return is_external_memory$LAYOUT;
    }

    private static final long is_external_memory$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int is_external_memory
     * }
     */
    public static final long is_external_memory$offset() {
        return is_external_memory$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int is_external_memory
     * }
     */
    public static int is_external_memory(MemorySegment struct) {
        return struct.get(is_external_memory$LAYOUT, is_external_memory$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int is_external_memory
     * }
     */
    public static void is_external_memory(MemorySegment struct, int fieldValue) {
        struct.set(is_external_memory$LAYOUT, is_external_memory$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * union {
     *     WebPRGBABuffer RGBA;
     *     WebPYUVABuffer YUVA;
     * }
     * }
     */
    public static class u {

        u() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            WebPRGBABuffer.layout().withName("RGBA"),
            WebPYUVABuffer.layout().withName("YUVA")
        ).withName("$anon$206:3");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final GroupLayout RGBA$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("RGBA"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * WebPRGBABuffer RGBA
         * }
         */
        public static final GroupLayout RGBA$layout() {
            return RGBA$LAYOUT;
        }

        private static final long RGBA$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * WebPRGBABuffer RGBA
         * }
         */
        public static final long RGBA$offset() {
            return RGBA$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * WebPRGBABuffer RGBA
         * }
         */
        public static MemorySegment RGBA(MemorySegment union) {
            return union.asSlice(RGBA$OFFSET, RGBA$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * WebPRGBABuffer RGBA
         * }
         */
        public static void RGBA(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, RGBA$OFFSET, RGBA$LAYOUT.byteSize());
        }

        private static final GroupLayout YUVA$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("YUVA"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * WebPYUVABuffer YUVA
         * }
         */
        public static final GroupLayout YUVA$layout() {
            return YUVA$LAYOUT;
        }

        private static final long YUVA$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * WebPYUVABuffer YUVA
         * }
         */
        public static final long YUVA$offset() {
            return YUVA$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * WebPYUVABuffer YUVA
         * }
         */
        public static MemorySegment YUVA(MemorySegment union) {
            return union.asSlice(YUVA$OFFSET, YUVA$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * WebPYUVABuffer YUVA
         * }
         */
        public static void YUVA(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, YUVA$OFFSET, YUVA$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout u$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("u"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     WebPRGBABuffer RGBA;
     *     WebPYUVABuffer YUVA;
     * } u
     * }
     */
    public static final GroupLayout u$layout() {
        return u$LAYOUT;
    }

    private static final long u$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     WebPRGBABuffer RGBA;
     *     WebPYUVABuffer YUVA;
     * } u
     * }
     */
    public static final long u$offset() {
        return u$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     WebPRGBABuffer RGBA;
     *     WebPYUVABuffer YUVA;
     * } u
     * }
     */
    public static MemorySegment u(MemorySegment struct) {
        return struct.asSlice(u$OFFSET, u$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     WebPRGBABuffer RGBA;
     *     WebPYUVABuffer YUVA;
     * } u
     * }
     */
    public static void u(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, u$OFFSET, u$LAYOUT.byteSize());
    }

    private static final SequenceLayout pad$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("pad"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t pad[4]
     * }
     */
    public static final SequenceLayout pad$layout() {
        return pad$LAYOUT;
    }

    private static final long pad$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t pad[4]
     * }
     */
    public static final long pad$offset() {
        return pad$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t pad[4]
     * }
     */
    public static MemorySegment pad(MemorySegment struct) {
        return struct.asSlice(pad$OFFSET, pad$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t pad[4]
     * }
     */
    public static void pad(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pad$OFFSET, pad$LAYOUT.byteSize());
    }

    private static long[] pad$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t pad[4]
     * }
     */
    public static long[] pad$dimensions() {
        return pad$DIMS;
    }
    private static final VarHandle pad$ELEM_HANDLE = pad$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t pad[4]
     * }
     */
    public static int pad(MemorySegment struct, long index0) {
        return (int)pad$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t pad[4]
     * }
     */
    public static void pad(MemorySegment struct, long index0, int fieldValue) {
        pad$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final AddressLayout private_memory$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("private_memory"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t *private_memory
     * }
     */
    public static final AddressLayout private_memory$layout() {
        return private_memory$LAYOUT;
    }

    private static final long private_memory$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t *private_memory
     * }
     */
    public static final long private_memory$offset() {
        return private_memory$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t *private_memory
     * }
     */
    public static MemorySegment private_memory(MemorySegment struct) {
        return struct.get(private_memory$LAYOUT, private_memory$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t *private_memory
     * }
     */
    public static void private_memory(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(private_memory$LAYOUT, private_memory$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

