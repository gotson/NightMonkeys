// Generated by jextract

package com.github.gotson.nightmonkeys.webp.lib.panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class WebPBitstreamFeatures {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("width"),
        Constants$root.C_INT$LAYOUT.withName("height"),
        Constants$root.C_INT$LAYOUT.withName("has_alpha"),
        Constants$root.C_INT$LAYOUT.withName("has_animation"),
        Constants$root.C_INT$LAYOUT.withName("format"),
        MemoryLayout.sequenceLayout(5, Constants$root.C_INT$LAYOUT).withName("pad")
    ).withName("WebPBitstreamFeatures");
    public static MemoryLayout $LAYOUT() {
        return WebPBitstreamFeatures.$struct$LAYOUT;
    }
    static final VarHandle width$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("width"));
    public static VarHandle width$VH() {
        return WebPBitstreamFeatures.width$VH;
    }
    public static int width$get(MemorySegment seg) {
        return (int)WebPBitstreamFeatures.width$VH.get(seg);
    }
    public static void width$set( MemorySegment seg, int x) {
        WebPBitstreamFeatures.width$VH.set(seg, x);
    }
    public static int width$get(MemorySegment seg, long index) {
        return (int)WebPBitstreamFeatures.width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void width$set(MemorySegment seg, long index, int x) {
        WebPBitstreamFeatures.width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle height$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("height"));
    public static VarHandle height$VH() {
        return WebPBitstreamFeatures.height$VH;
    }
    public static int height$get(MemorySegment seg) {
        return (int)WebPBitstreamFeatures.height$VH.get(seg);
    }
    public static void height$set( MemorySegment seg, int x) {
        WebPBitstreamFeatures.height$VH.set(seg, x);
    }
    public static int height$get(MemorySegment seg, long index) {
        return (int)WebPBitstreamFeatures.height$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void height$set(MemorySegment seg, long index, int x) {
        WebPBitstreamFeatures.height$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle has_alpha$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("has_alpha"));
    public static VarHandle has_alpha$VH() {
        return WebPBitstreamFeatures.has_alpha$VH;
    }
    public static int has_alpha$get(MemorySegment seg) {
        return (int)WebPBitstreamFeatures.has_alpha$VH.get(seg);
    }
    public static void has_alpha$set( MemorySegment seg, int x) {
        WebPBitstreamFeatures.has_alpha$VH.set(seg, x);
    }
    public static int has_alpha$get(MemorySegment seg, long index) {
        return (int)WebPBitstreamFeatures.has_alpha$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void has_alpha$set(MemorySegment seg, long index, int x) {
        WebPBitstreamFeatures.has_alpha$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle has_animation$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("has_animation"));
    public static VarHandle has_animation$VH() {
        return WebPBitstreamFeatures.has_animation$VH;
    }
    public static int has_animation$get(MemorySegment seg) {
        return (int)WebPBitstreamFeatures.has_animation$VH.get(seg);
    }
    public static void has_animation$set( MemorySegment seg, int x) {
        WebPBitstreamFeatures.has_animation$VH.set(seg, x);
    }
    public static int has_animation$get(MemorySegment seg, long index) {
        return (int)WebPBitstreamFeatures.has_animation$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void has_animation$set(MemorySegment seg, long index, int x) {
        WebPBitstreamFeatures.has_animation$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle format$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("format"));
    public static VarHandle format$VH() {
        return WebPBitstreamFeatures.format$VH;
    }
    public static int format$get(MemorySegment seg) {
        return (int)WebPBitstreamFeatures.format$VH.get(seg);
    }
    public static void format$set( MemorySegment seg, int x) {
        WebPBitstreamFeatures.format$VH.set(seg, x);
    }
    public static int format$get(MemorySegment seg, long index) {
        return (int)WebPBitstreamFeatures.format$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void format$set(MemorySegment seg, long index, int x) {
        WebPBitstreamFeatures.format$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment pad$slice(MemorySegment seg) {
        return seg.asSlice(20, 20);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


