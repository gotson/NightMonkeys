// Generated by jextract

package com.github.gotson.nightmonkeys.webp.lib.panama;

import jdk.incubator.foreign.GroupLayout;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.MemoryLayout;
import jdk.incubator.foreign.MemorySegment;
import jdk.incubator.foreign.ResourceScope;
import jdk.incubator.foreign.SegmentAllocator;

import java.lang.invoke.VarHandle;

public class WebPChunkIterator {

    static final GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("chunk_num"),
        Constants$root.C_INT$LAYOUT.withName("num_chunks"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("bytes"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("size")
        ).withName("chunk"),
        MemoryLayout.sequenceLayout(6, Constants$root.C_INT$LAYOUT).withName("pad"),
        Constants$root.C_POINTER$LAYOUT.withName("private_")
    ).withName("WebPChunkIterator");

    public static MemoryLayout $LAYOUT() {
        return WebPChunkIterator.$struct$LAYOUT;
    }

    static final VarHandle chunk_num$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("chunk_num"));

    public static VarHandle chunk_num$VH() {
        return WebPChunkIterator.chunk_num$VH;
    }

    public static int chunk_num$get(MemorySegment seg) {
        return (int) WebPChunkIterator.chunk_num$VH.get(seg);
    }

    public static void chunk_num$set(MemorySegment seg, int x) {
        WebPChunkIterator.chunk_num$VH.set(seg, x);
    }

    public static int chunk_num$get(MemorySegment seg, long index) {
        return (int) WebPChunkIterator.chunk_num$VH.get(seg.asSlice(index * sizeof()));
    }

    public static void chunk_num$set(MemorySegment seg, long index, int x) {
        WebPChunkIterator.chunk_num$VH.set(seg.asSlice(index * sizeof()), x);
    }

    static final VarHandle num_chunks$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("num_chunks"));

    public static VarHandle num_chunks$VH() {
        return WebPChunkIterator.num_chunks$VH;
    }

    public static int num_chunks$get(MemorySegment seg) {
        return (int) WebPChunkIterator.num_chunks$VH.get(seg);
    }

    public static void num_chunks$set(MemorySegment seg, int x) {
        WebPChunkIterator.num_chunks$VH.set(seg, x);
    }

    public static int num_chunks$get(MemorySegment seg, long index) {
        return (int) WebPChunkIterator.num_chunks$VH.get(seg.asSlice(index * sizeof()));
    }

    public static void num_chunks$set(MemorySegment seg, long index, int x) {
        WebPChunkIterator.num_chunks$VH.set(seg.asSlice(index * sizeof()), x);
    }

    public static MemorySegment chunk$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }

    public static MemorySegment pad$slice(MemorySegment seg) {
        return seg.asSlice(24, 24);
    }

    static final VarHandle private_$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("private_"));

    public static VarHandle private_$VH() {
        return WebPChunkIterator.private_$VH;
    }

    public static MemoryAddress private_$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress) WebPChunkIterator.private_$VH.get(seg);
    }

    public static void private_$set(MemorySegment seg, MemoryAddress x) {
        WebPChunkIterator.private_$VH.set(seg, x);
    }

    public static MemoryAddress private_$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress) WebPChunkIterator.private_$VH.get(seg.asSlice(index * sizeof()));
    }

    public static void private_$set(MemorySegment seg, long index, MemoryAddress x) {
        WebPChunkIterator.private_$VH.set(seg.asSlice(index * sizeof()), x);
    }

    public static long sizeof() {
        return $LAYOUT().byteSize();
    }

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate($LAYOUT());
    }

    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }

    public static MemorySegment allocate(ResourceScope scope) {
        return allocate(SegmentAllocator.nativeAllocator(scope));
    }

    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }

    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) {
        return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope);
    }
}


