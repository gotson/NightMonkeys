// Generated by jextract

package com.github.gotson.nightmonkeys.webp.lib.panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class WebPDecBuffer {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("colorspace"),
        Constants$root.C_INT$LAYOUT.withName("width"),
        Constants$root.C_INT$LAYOUT.withName("height"),
        Constants$root.C_INT$LAYOUT.withName("is_external_memory"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("rgba"),
                Constants$root.C_INT$LAYOUT.withName("stride"),
                MemoryLayout.paddingLayout(32),
                Constants$root.C_LONG_LONG$LAYOUT.withName("size")
            ).withName("RGBA"),
            MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("y"),
                Constants$root.C_POINTER$LAYOUT.withName("u"),
                Constants$root.C_POINTER$LAYOUT.withName("v"),
                Constants$root.C_POINTER$LAYOUT.withName("a"),
                Constants$root.C_INT$LAYOUT.withName("y_stride"),
                Constants$root.C_INT$LAYOUT.withName("u_stride"),
                Constants$root.C_INT$LAYOUT.withName("v_stride"),
                Constants$root.C_INT$LAYOUT.withName("a_stride"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("y_size"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("u_size"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("v_size"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("a_size")
            ).withName("YUVA")
        ).withName("u"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_INT$LAYOUT).withName("pad"),
        Constants$root.C_POINTER$LAYOUT.withName("private_memory")
    ).withName("WebPDecBuffer");
    public static MemoryLayout $LAYOUT() {
        return WebPDecBuffer.$struct$LAYOUT;
    }
    static final VarHandle colorspace$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("colorspace"));
    public static VarHandle colorspace$VH() {
        return WebPDecBuffer.colorspace$VH;
    }
    public static int colorspace$get(MemorySegment seg) {
        return (int)WebPDecBuffer.colorspace$VH.get(seg);
    }
    public static void colorspace$set( MemorySegment seg, int x) {
        WebPDecBuffer.colorspace$VH.set(seg, x);
    }
    public static int colorspace$get(MemorySegment seg, long index) {
        return (int)WebPDecBuffer.colorspace$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void colorspace$set(MemorySegment seg, long index, int x) {
        WebPDecBuffer.colorspace$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle width$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("width"));
    public static VarHandle width$VH() {
        return WebPDecBuffer.width$VH;
    }
    public static int width$get(MemorySegment seg) {
        return (int)WebPDecBuffer.width$VH.get(seg);
    }
    public static void width$set( MemorySegment seg, int x) {
        WebPDecBuffer.width$VH.set(seg, x);
    }
    public static int width$get(MemorySegment seg, long index) {
        return (int)WebPDecBuffer.width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void width$set(MemorySegment seg, long index, int x) {
        WebPDecBuffer.width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle height$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("height"));
    public static VarHandle height$VH() {
        return WebPDecBuffer.height$VH;
    }
    public static int height$get(MemorySegment seg) {
        return (int)WebPDecBuffer.height$VH.get(seg);
    }
    public static void height$set( MemorySegment seg, int x) {
        WebPDecBuffer.height$VH.set(seg, x);
    }
    public static int height$get(MemorySegment seg, long index) {
        return (int)WebPDecBuffer.height$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void height$set(MemorySegment seg, long index, int x) {
        WebPDecBuffer.height$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle is_external_memory$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("is_external_memory"));
    public static VarHandle is_external_memory$VH() {
        return WebPDecBuffer.is_external_memory$VH;
    }
    public static int is_external_memory$get(MemorySegment seg) {
        return (int)WebPDecBuffer.is_external_memory$VH.get(seg);
    }
    public static void is_external_memory$set( MemorySegment seg, int x) {
        WebPDecBuffer.is_external_memory$VH.set(seg, x);
    }
    public static int is_external_memory$get(MemorySegment seg, long index) {
        return (int)WebPDecBuffer.is_external_memory$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_external_memory$set(MemorySegment seg, long index, int x) {
        WebPDecBuffer.is_external_memory$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class u {

        static final  GroupLayout u$union$LAYOUT = MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("rgba"),
                Constants$root.C_INT$LAYOUT.withName("stride"),
                MemoryLayout.paddingLayout(32),
                Constants$root.C_LONG_LONG$LAYOUT.withName("size")
            ).withName("RGBA"),
            MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("y"),
                Constants$root.C_POINTER$LAYOUT.withName("u"),
                Constants$root.C_POINTER$LAYOUT.withName("v"),
                Constants$root.C_POINTER$LAYOUT.withName("a"),
                Constants$root.C_INT$LAYOUT.withName("y_stride"),
                Constants$root.C_INT$LAYOUT.withName("u_stride"),
                Constants$root.C_INT$LAYOUT.withName("v_stride"),
                Constants$root.C_INT$LAYOUT.withName("a_stride"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("y_size"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("u_size"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("v_size"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("a_size")
            ).withName("YUVA")
        );
        public static MemoryLayout $LAYOUT() {
            return u.u$union$LAYOUT;
        }
        public static MemorySegment RGBA$slice(MemorySegment seg) {
            return seg.asSlice(0, 24);
        }
        public static MemorySegment YUVA$slice(MemorySegment seg) {
            return seg.asSlice(0, 80);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
        public static MemorySegment allocateArray(int len, ResourceScope scope) {
            return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment u$slice(MemorySegment seg) {
        return seg.asSlice(16, 80);
    }
    public static MemorySegment pad$slice(MemorySegment seg) {
        return seg.asSlice(96, 16);
    }
    static final VarHandle private_memory$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("private_memory"));
    public static VarHandle private_memory$VH() {
        return WebPDecBuffer.private_memory$VH;
    }
    public static MemoryAddress private_memory$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)WebPDecBuffer.private_memory$VH.get(seg);
    }
    public static void private_memory$set( MemorySegment seg, MemoryAddress x) {
        WebPDecBuffer.private_memory$VH.set(seg, x);
    }
    public static MemoryAddress private_memory$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)WebPDecBuffer.private_memory$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void private_memory$set(MemorySegment seg, long index, MemoryAddress x) {
        WebPDecBuffer.private_memory$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


