// Generated by jextract

package com.github.gotson.nightmonkeys.webp.lib.panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class WebPRGBABuffer {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("rgba"),
        Constants$root.C_INT$LAYOUT.withName("stride"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("size")
    ).withName("WebPRGBABuffer");
    public static MemoryLayout $LAYOUT() {
        return WebPRGBABuffer.$struct$LAYOUT;
    }
    static final VarHandle rgba$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rgba"));
    public static VarHandle rgba$VH() {
        return WebPRGBABuffer.rgba$VH;
    }
    public static MemoryAddress rgba$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)WebPRGBABuffer.rgba$VH.get(seg);
    }
    public static void rgba$set( MemorySegment seg, MemoryAddress x) {
        WebPRGBABuffer.rgba$VH.set(seg, x);
    }
    public static MemoryAddress rgba$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)WebPRGBABuffer.rgba$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rgba$set(MemorySegment seg, long index, MemoryAddress x) {
        WebPRGBABuffer.rgba$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle stride$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("stride"));
    public static VarHandle stride$VH() {
        return WebPRGBABuffer.stride$VH;
    }
    public static int stride$get(MemorySegment seg) {
        return (int)WebPRGBABuffer.stride$VH.get(seg);
    }
    public static void stride$set( MemorySegment seg, int x) {
        WebPRGBABuffer.stride$VH.set(seg, x);
    }
    public static int stride$get(MemorySegment seg, long index) {
        return (int)WebPRGBABuffer.stride$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void stride$set(MemorySegment seg, long index, int x) {
        WebPRGBABuffer.stride$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("size"));
    public static VarHandle size$VH() {
        return WebPRGBABuffer.size$VH;
    }
    public static long size$get(MemorySegment seg) {
        return (long)WebPRGBABuffer.size$VH.get(seg);
    }
    public static void size$set( MemorySegment seg, long x) {
        WebPRGBABuffer.size$VH.set(seg, x);
    }
    public static long size$get(MemorySegment seg, long index) {
        return (long)WebPRGBABuffer.size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void size$set(MemorySegment seg, long index, long x) {
        WebPRGBABuffer.size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


