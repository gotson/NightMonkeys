// Generated by jextract

package com.github.gotson.nightmonkeys.webp.lib.panama;

import jdk.incubator.foreign.GroupLayout;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.MemoryLayout;
import jdk.incubator.foreign.MemorySegment;
import jdk.incubator.foreign.ResourceScope;
import jdk.incubator.foreign.SegmentAllocator;

import java.lang.invoke.VarHandle;

public class WebPData {

    static final GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("bytes"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("size")
    ).withName("WebPData");

    public static MemoryLayout $LAYOUT() {
        return WebPData.$struct$LAYOUT;
    }

    static final VarHandle bytes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bytes"));

    public static VarHandle bytes$VH() {
        return WebPData.bytes$VH;
    }

    public static MemoryAddress bytes$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress) WebPData.bytes$VH.get(seg);
    }

    public static void bytes$set(MemorySegment seg, MemoryAddress x) {
        WebPData.bytes$VH.set(seg, x);
    }

    public static MemoryAddress bytes$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress) WebPData.bytes$VH.get(seg.asSlice(index * sizeof()));
    }

    public static void bytes$set(MemorySegment seg, long index, MemoryAddress x) {
        WebPData.bytes$VH.set(seg.asSlice(index * sizeof()), x);
    }

    static final VarHandle size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("size"));

    public static VarHandle size$VH() {
        return WebPData.size$VH;
    }

    public static long size$get(MemorySegment seg) {
        return (long) WebPData.size$VH.get(seg);
    }

    public static void size$set(MemorySegment seg, long x) {
        WebPData.size$VH.set(seg, x);
    }

    public static long size$get(MemorySegment seg, long index) {
        return (long) WebPData.size$VH.get(seg.asSlice(index * sizeof()));
    }

    public static void size$set(MemorySegment seg, long index, long x) {
        WebPData.size$VH.set(seg.asSlice(index * sizeof()), x);
    }

    public static long sizeof() {
        return $LAYOUT().byteSize();
    }

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate($LAYOUT());
    }

    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }

    public static MemorySegment allocate(ResourceScope scope) {
        return allocate(SegmentAllocator.nativeAllocator(scope));
    }

    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }

    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) {
        return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope);
    }
}


