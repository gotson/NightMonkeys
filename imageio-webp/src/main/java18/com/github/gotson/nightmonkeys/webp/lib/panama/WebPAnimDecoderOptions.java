// Generated by jextract

package com.github.gotson.nightmonkeys.webp.lib.panama;

import jdk.incubator.foreign.GroupLayout;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.MemoryLayout;
import jdk.incubator.foreign.MemorySegment;
import jdk.incubator.foreign.ResourceScope;
import jdk.incubator.foreign.SegmentAllocator;

import java.lang.invoke.VarHandle;

public class WebPAnimDecoderOptions {

    static final GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("color_mode"),
        Constants$root.C_INT$LAYOUT.withName("use_threads"),
        MemoryLayout.sequenceLayout(7, Constants$root.C_INT$LAYOUT).withName("padding")
    ).withName("WebPAnimDecoderOptions");

    public static MemoryLayout $LAYOUT() {
        return WebPAnimDecoderOptions.$struct$LAYOUT;
    }

    static final VarHandle color_mode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("color_mode"));

    public static VarHandle color_mode$VH() {
        return WebPAnimDecoderOptions.color_mode$VH;
    }

    public static int color_mode$get(MemorySegment seg) {
        return (int) WebPAnimDecoderOptions.color_mode$VH.get(seg);
    }

    public static void color_mode$set(MemorySegment seg, int x) {
        WebPAnimDecoderOptions.color_mode$VH.set(seg, x);
    }

    public static int color_mode$get(MemorySegment seg, long index) {
        return (int) WebPAnimDecoderOptions.color_mode$VH.get(seg.asSlice(index * sizeof()));
    }

    public static void color_mode$set(MemorySegment seg, long index, int x) {
        WebPAnimDecoderOptions.color_mode$VH.set(seg.asSlice(index * sizeof()), x);
    }

    static final VarHandle use_threads$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("use_threads"));

    public static VarHandle use_threads$VH() {
        return WebPAnimDecoderOptions.use_threads$VH;
    }

    public static int use_threads$get(MemorySegment seg) {
        return (int) WebPAnimDecoderOptions.use_threads$VH.get(seg);
    }

    public static void use_threads$set(MemorySegment seg, int x) {
        WebPAnimDecoderOptions.use_threads$VH.set(seg, x);
    }

    public static int use_threads$get(MemorySegment seg, long index) {
        return (int) WebPAnimDecoderOptions.use_threads$VH.get(seg.asSlice(index * sizeof()));
    }

    public static void use_threads$set(MemorySegment seg, long index, int x) {
        WebPAnimDecoderOptions.use_threads$VH.set(seg.asSlice(index * sizeof()), x);
    }

    public static MemorySegment padding$slice(MemorySegment seg) {
        return seg.asSlice(8, 28);
    }

    public static long sizeof() {
        return $LAYOUT().byteSize();
    }

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate($LAYOUT());
    }

    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }

    public static MemorySegment allocate(ResourceScope scope) {
        return allocate(SegmentAllocator.nativeAllocator(scope));
    }

    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }

    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) {
        return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope);
    }
}


