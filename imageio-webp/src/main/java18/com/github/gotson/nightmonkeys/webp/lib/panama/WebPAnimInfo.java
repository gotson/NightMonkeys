// Generated by jextract

package com.github.gotson.nightmonkeys.webp.lib.panama;

import jdk.incubator.foreign.GroupLayout;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.MemoryLayout;
import jdk.incubator.foreign.MemorySegment;
import jdk.incubator.foreign.ResourceScope;
import jdk.incubator.foreign.SegmentAllocator;

import java.lang.invoke.VarHandle;

public class WebPAnimInfo {

    static final GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("canvas_width"),
        Constants$root.C_INT$LAYOUT.withName("canvas_height"),
        Constants$root.C_INT$LAYOUT.withName("loop_count"),
        Constants$root.C_INT$LAYOUT.withName("bgcolor"),
        Constants$root.C_INT$LAYOUT.withName("frame_count"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_INT$LAYOUT).withName("pad")
    ).withName("WebPAnimInfo");

    public static MemoryLayout $LAYOUT() {
        return WebPAnimInfo.$struct$LAYOUT;
    }

    static final VarHandle canvas_width$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("canvas_width"));

    public static VarHandle canvas_width$VH() {
        return WebPAnimInfo.canvas_width$VH;
    }

    public static int canvas_width$get(MemorySegment seg) {
        return (int) WebPAnimInfo.canvas_width$VH.get(seg);
    }

    public static void canvas_width$set(MemorySegment seg, int x) {
        WebPAnimInfo.canvas_width$VH.set(seg, x);
    }

    public static int canvas_width$get(MemorySegment seg, long index) {
        return (int) WebPAnimInfo.canvas_width$VH.get(seg.asSlice(index * sizeof()));
    }

    public static void canvas_width$set(MemorySegment seg, long index, int x) {
        WebPAnimInfo.canvas_width$VH.set(seg.asSlice(index * sizeof()), x);
    }

    static final VarHandle canvas_height$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("canvas_height"));

    public static VarHandle canvas_height$VH() {
        return WebPAnimInfo.canvas_height$VH;
    }

    public static int canvas_height$get(MemorySegment seg) {
        return (int) WebPAnimInfo.canvas_height$VH.get(seg);
    }

    public static void canvas_height$set(MemorySegment seg, int x) {
        WebPAnimInfo.canvas_height$VH.set(seg, x);
    }

    public static int canvas_height$get(MemorySegment seg, long index) {
        return (int) WebPAnimInfo.canvas_height$VH.get(seg.asSlice(index * sizeof()));
    }

    public static void canvas_height$set(MemorySegment seg, long index, int x) {
        WebPAnimInfo.canvas_height$VH.set(seg.asSlice(index * sizeof()), x);
    }

    static final VarHandle loop_count$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("loop_count"));

    public static VarHandle loop_count$VH() {
        return WebPAnimInfo.loop_count$VH;
    }

    public static int loop_count$get(MemorySegment seg) {
        return (int) WebPAnimInfo.loop_count$VH.get(seg);
    }

    public static void loop_count$set(MemorySegment seg, int x) {
        WebPAnimInfo.loop_count$VH.set(seg, x);
    }

    public static int loop_count$get(MemorySegment seg, long index) {
        return (int) WebPAnimInfo.loop_count$VH.get(seg.asSlice(index * sizeof()));
    }

    public static void loop_count$set(MemorySegment seg, long index, int x) {
        WebPAnimInfo.loop_count$VH.set(seg.asSlice(index * sizeof()), x);
    }

    static final VarHandle bgcolor$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bgcolor"));

    public static VarHandle bgcolor$VH() {
        return WebPAnimInfo.bgcolor$VH;
    }

    public static int bgcolor$get(MemorySegment seg) {
        return (int) WebPAnimInfo.bgcolor$VH.get(seg);
    }

    public static void bgcolor$set(MemorySegment seg, int x) {
        WebPAnimInfo.bgcolor$VH.set(seg, x);
    }

    public static int bgcolor$get(MemorySegment seg, long index) {
        return (int) WebPAnimInfo.bgcolor$VH.get(seg.asSlice(index * sizeof()));
    }

    public static void bgcolor$set(MemorySegment seg, long index, int x) {
        WebPAnimInfo.bgcolor$VH.set(seg.asSlice(index * sizeof()), x);
    }

    static final VarHandle frame_count$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("frame_count"));

    public static VarHandle frame_count$VH() {
        return WebPAnimInfo.frame_count$VH;
    }

    public static int frame_count$get(MemorySegment seg) {
        return (int) WebPAnimInfo.frame_count$VH.get(seg);
    }

    public static void frame_count$set(MemorySegment seg, int x) {
        WebPAnimInfo.frame_count$VH.set(seg, x);
    }

    public static int frame_count$get(MemorySegment seg, long index) {
        return (int) WebPAnimInfo.frame_count$VH.get(seg.asSlice(index * sizeof()));
    }

    public static void frame_count$set(MemorySegment seg, long index, int x) {
        WebPAnimInfo.frame_count$VH.set(seg.asSlice(index * sizeof()), x);
    }

    public static MemorySegment pad$slice(MemorySegment seg) {
        return seg.asSlice(20, 16);
    }

    public static long sizeof() {
        return $LAYOUT().byteSize();
    }

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate($LAYOUT());
    }

    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }

    public static MemorySegment allocate(ResourceScope scope) {
        return allocate(SegmentAllocator.nativeAllocator(scope));
    }

    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }

    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) {
        return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope);
    }
}


