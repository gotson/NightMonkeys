// Generated by jextract

package com.github.gotson.nightmonkeys.webp.lib.panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class WebPDecoderConfig {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("width"),
            Constants$root.C_INT$LAYOUT.withName("height"),
            Constants$root.C_INT$LAYOUT.withName("has_alpha"),
            Constants$root.C_INT$LAYOUT.withName("has_animation"),
            Constants$root.C_INT$LAYOUT.withName("format"),
            MemoryLayout.sequenceLayout(5, Constants$root.C_INT$LAYOUT).withName("pad")
        ).withName("input"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("colorspace"),
            Constants$root.C_INT$LAYOUT.withName("width"),
            Constants$root.C_INT$LAYOUT.withName("height"),
            Constants$root.C_INT$LAYOUT.withName("is_external_memory"),
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_POINTER$LAYOUT.withName("rgba"),
                    Constants$root.C_INT$LAYOUT.withName("stride"),
                    MemoryLayout.paddingLayout(32),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("size")
                ).withName("RGBA"),
                MemoryLayout.structLayout(
                    Constants$root.C_POINTER$LAYOUT.withName("y"),
                    Constants$root.C_POINTER$LAYOUT.withName("u"),
                    Constants$root.C_POINTER$LAYOUT.withName("v"),
                    Constants$root.C_POINTER$LAYOUT.withName("a"),
                    Constants$root.C_INT$LAYOUT.withName("y_stride"),
                    Constants$root.C_INT$LAYOUT.withName("u_stride"),
                    Constants$root.C_INT$LAYOUT.withName("v_stride"),
                    Constants$root.C_INT$LAYOUT.withName("a_stride"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("y_size"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("u_size"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("v_size"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("a_size")
                ).withName("YUVA")
            ).withName("u"),
            MemoryLayout.sequenceLayout(4, Constants$root.C_INT$LAYOUT).withName("pad"),
            Constants$root.C_POINTER$LAYOUT.withName("private_memory")
        ).withName("output"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("bypass_filtering"),
            Constants$root.C_INT$LAYOUT.withName("no_fancy_upsampling"),
            Constants$root.C_INT$LAYOUT.withName("use_cropping"),
            Constants$root.C_INT$LAYOUT.withName("crop_left"),
            Constants$root.C_INT$LAYOUT.withName("crop_top"),
            Constants$root.C_INT$LAYOUT.withName("crop_width"),
            Constants$root.C_INT$LAYOUT.withName("crop_height"),
            Constants$root.C_INT$LAYOUT.withName("use_scaling"),
            Constants$root.C_INT$LAYOUT.withName("scaled_width"),
            Constants$root.C_INT$LAYOUT.withName("scaled_height"),
            Constants$root.C_INT$LAYOUT.withName("use_threads"),
            Constants$root.C_INT$LAYOUT.withName("dithering_strength"),
            Constants$root.C_INT$LAYOUT.withName("flip"),
            Constants$root.C_INT$LAYOUT.withName("alpha_dithering_strength"),
            MemoryLayout.sequenceLayout(5, Constants$root.C_INT$LAYOUT).withName("pad")
        ).withName("options"),
        MemoryLayout.paddingLayout(32)
    ).withName("WebPDecoderConfig");
    public static MemoryLayout $LAYOUT() {
        return WebPDecoderConfig.$struct$LAYOUT;
    }
    public static MemorySegment input$slice(MemorySegment seg) {
        return seg.asSlice(0, 40);
    }
    public static MemorySegment output$slice(MemorySegment seg) {
        return seg.asSlice(40, 120);
    }
    public static MemorySegment options$slice(MemorySegment seg) {
        return seg.asSlice(160, 76);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


